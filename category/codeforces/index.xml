<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codeforces | Visors的个人主页</title>
    <link>https://visors.github.io/category/codeforces/</link>
      <atom:link href="https://visors.github.io/category/codeforces/index.xml" rel="self" type="application/rss+xml" />
    <description>Codeforces</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>©2022 万祚全 All rights reserved</copyright><lastBuildDate>Sun, 25 Apr 2021 22:15:30 +0800</lastBuildDate>
    <image>
      <url>https://visors.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Codeforces</title>
      <link>https://visors.github.io/category/codeforces/</link>
    </image>
    
    <item>
      <title>Codeforces Round 717 Div.2</title>
      <link>https://visors.github.io/post/codeforces-round-717-div.2/</link>
      <pubDate>Sun, 25 Apr 2021 22:15:30 +0800</pubDate>
      <guid>https://visors.github.io/post/codeforces-round-717-div.2/</guid>
      <description>&lt;h2 id=&#34;a---tit-for-tathttpscodeforcescomcontest1516problema&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1516/problem/A&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A - Tit for Tat&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这题贪心就行了。要使字典序尽可能小，当然是从首至尾贪心，只要可以操作且还有操作次数，都是是当前数字减小，末尾数字增加。这样得到的字典序一定是最小的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int T;
int n, k;
vector&amp;lt;int&amp;gt; v;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    cin &amp;gt;&amp;gt; T;
    while (T--) {
        cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
        v.resize(n);
        for (int &amp;amp;it:v) cin &amp;gt;&amp;gt; it;
        for (int i = 0; i &amp;lt; n - 1; i++) {
            int delta = min(v[i], k);
            v[i] -= delta;
            v.back() += delta;
            k -= delta;
            if (k == 0) break;
        }
        for (int i = 0; i &amp;lt; n - 1; i++) cout &amp;lt;&amp;lt; v[i] &amp;lt;&amp;lt; &#39; &#39;;
        cout &amp;lt;&amp;lt; v.back() &amp;lt;&amp;lt; endl;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;b---agaga-xooorrrhttpscodeforcescomcontest1516problemb&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1516/problem/B&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;B - AGAGA XOOORRR&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这题其实只需要运用一点位运算的知识。&lt;/p&gt;
&lt;p&gt;一开始我以为想出正解了，结果是把题目读错了（大错特错），那时候正好拿外卖吃饭，就找LYH交流了手，发现自己病情严重……&lt;/p&gt;
&lt;p&gt;由于异或的特性，偶数个相同的数异或和等于$0$，例如$a\oplus a = 0$，奇数个相同的数异或和等于其本身，例如$a\oplus a\oplus a = a$。&lt;/p&gt;
&lt;p&gt;那么，若我们一开始求出所有数的异或和为$ans$，如果$ans=0$，意味着序列可以被划分为两段，这两段异或和相同；如果$ans&amp;gt;0$，我们应检查序列能被分为几段异或和为$ans$的部分，且这个部分数一定为奇数。&lt;/p&gt;
&lt;p&gt;按照题意，$ans=0$意味着YES，$ans&amp;gt;0$时如果只能被分为完整的一段为NO，其余为YES。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int T, n;
vector&amp;lt;int&amp;gt; v;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    cin &amp;gt;&amp;gt; T;
    while (T--) {
        cin &amp;gt;&amp;gt; n;
        v.resize(n);
        int ans = 0;
        for (int &amp;amp;it:v) {
            cin &amp;gt;&amp;gt; it;
            ans ^= it;
        }
        if (ans == 0) {
            cout &amp;lt;&amp;lt; &amp;quot;YES\n&amp;quot;;
            continue;
        }
        int tmp = 0, cnt = 0;
        for (int it:v) {
            tmp ^= it;
            if (tmp == ans) {
                cnt++;
                tmp = 0;
            }
        }
        if (cnt &amp;gt; 1) cout &amp;lt;&amp;lt; &amp;quot;YES\n&amp;quot;;
        else cout &amp;lt;&amp;lt; &amp;quot;NO\n&amp;quot;;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;c---baby-ehab-partitions-againhttpscodeforcescomcontest1516problemc&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1516/problem/C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C - Baby Ehab Partitions Again&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;题目大意是给定一个序列，让你删除尽可能少的数，使得删除后的序列不能够被完全划分成两个和相同的部分。&lt;/p&gt;
&lt;p&gt;所有首先要做的肯定是判断这个序列不删的时候能不能被划分成两个和相同的部分，判断的方法和《kkksc03考前临时抱佛脚》那题一样，可以用01背包求出两部分中和最小的最大值，如果这个最大值为sum/2，那么就不需要找数删，否则不用删数就已经满足要求了，输出0.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Codeforces Round 716 Div.2</title>
      <link>https://visors.github.io/post/codeforces-round-716-div.2/</link>
      <pubDate>Tue, 20 Apr 2021 11:31:34 +0800</pubDate>
      <guid>https://visors.github.io/post/codeforces-round-716-div.2/</guid>
      <description>&lt;p&gt;已经连着两场掉分了，麻了麻了……&lt;/p&gt;
&lt;p&gt;这场开的比较早，在寝室里打的，九点多的时候还比较闹，有点难静下心来思考。加之前一晚喝了酒，感觉脑子里一片混沌——这大概是发挥不好的一点场外原因，还是希望下一场能上大分。&lt;/p&gt;
&lt;p&gt;近期还有一个问题是出题出的比较慢，以往我前两题出的都是非常快的，但最近越来越慢，可能要到四五十分钟才能出完，浩元学长这时候C都已经出思路了……&lt;/p&gt;
&lt;h2 id=&#34;a---perfectly-imperfect-arrayhttpscodeforcescomcontest1514problema&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1514/problem/A&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A - Perfectly Imperfect Array&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;题目大意就是给定一个数组，问能不能从中取出一个子序列，使得其中所有数的乘积为一个完全平方数。如果可以输出NO，不可以输出YES。&lt;/p&gt;
&lt;p&gt;对于任意个完全平方数的乘积$a^2&lt;em&gt;b^2&lt;/em&gt;\cdots&lt;em&gt;c^2 = (a&lt;/em&gt;b*\cdots *c)^2$，也一定是完全平方数。所以只要有数组中有非完全平方数，那么取该数为子序列就为YES，否则数组中元素全为完全平方数，任意个组合结果仍是完全平方数，为NO。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int T, n;
vector&amp;lt;int&amp;gt; v;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    cin &amp;gt;&amp;gt; T;
    while (T--) {
        cin &amp;gt;&amp;gt; n;
        v.resize(n);
        for (int &amp;amp;it:v) cin &amp;gt;&amp;gt; it;
        bool flag = true;
        for (int it:v) {
            if (it == 1) continue;
            int tmp = sqrt(it);
            if (tmp * tmp != it) {
                flag = false;
                break;
            }
        }
        if (!flag) cout &amp;lt;&amp;lt; &amp;quot;YES\n&amp;quot;;
        else cout &amp;lt;&amp;lt; &amp;quot;NO\n&amp;quot;;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;b---and-0-sum-bighttpscodeforcescomcontest1514problemb&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1514/problem/B&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;B - AND 0, Sum Big&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一开始读掉了这一条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the sum of its elements is as large as possible.&lt;/li&gt;
&lt;li&gt;所有元素的和尽可能大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事实上这条就是解题的关键。首先要满足所有数按位与结果为$0$，其实就是要所有数的同位数字中至少出现一个$0$。我们又知道，即使是二进制下我们也可以仿照十进制进行竖式运算，所以要同时让按位与结果为$0$，还要所有元素的和尽可能大，一定是在所有数的同位数字中有且仅出现一个$0$，这样得到的元素和为$(n-1)*(2^k-1)$。&lt;/p&gt;
&lt;p&gt;那很容易就能得知本题的答案，即每位共$n$个数字，从中选一个作为$0$，其它的作为$1$，总共选$k$位，根据乘法原理答案就是$n^k$。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

typedef long long ll;

const ll MOD = 1e9 + 7;

int T;
ll n, k;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    cin &amp;gt;&amp;gt; T;
    while (T--) {
        cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
        ll ans = 1;
        for (int i = 1; i &amp;lt;= k; i++)
            ans = (ans * n) % MOD;
        cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;c---product-1-modulo-nhttpscodeforcescomcontest1514problemc&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1514/problem/C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C - Product 1 Modulo N&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;写这题时，我先用下面代码打了个表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int n;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    for (n = 1; n &amp;lt;= 20; n++) {
        vector&amp;lt;int&amp;gt; ans;
        for (int i = 0; i &amp;lt; (1 &amp;lt;&amp;lt; (n - 1)); i++) {
            int tmp = i;
            int cnt = 1, mul = 1;
            vector&amp;lt;int&amp;gt; v;
            while (tmp) {
                if (tmp &amp;amp; 1) {
                    mul *= cnt;
                    v.push_back(cnt);
                }
                cnt++;
                tmp &amp;gt;&amp;gt;= 1;
            }
            if (mul % n == 1 &amp;amp;&amp;amp; v.size() &amp;gt; ans.size()) ans = v;
        }
        cout &amp;lt;&amp;lt; &amp;quot;n = &amp;quot; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;quot;: \n&amp;quot;;
        cout &amp;lt;&amp;lt; ans.size() &amp;lt;&amp;lt; endl;
        for (int it:ans) cout &amp;lt;&amp;lt; it &amp;lt;&amp;lt; &#39; &#39;;
        cout &amp;lt;&amp;lt; endl;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;观察了一下$1\leq n\leq 20$下的结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n = 1: 
0

n = 2: 
1
1 
n = 3: 
1
1 
n = 4: 
1
1 
n = 5: 
3
1 2 3 
n = 6: 
1
1 
n = 7: 
5
1 2 3 4 5 
n = 8: 
4
1 3 5 7 
n = 9: 
5
1 2 4 5 7 
n = 10: 
3
1 3 7 
n = 11: 
9
1 2 3 4 5 6 7 8 9 
n = 12: 
4
1 5 7 11 
n = 13: 
11
1 2 3 4 5 6 7 8 9 10 11 
n = 14: 
5
1 3 5 9 11 
n = 15: 
8
1 2 4 7 8 11 13 14 
n = 16: 
8
1 3 5 7 9 11 13 15 
n = 17: 
15
1 2 3 4 5 6 7 8 10 11 12 13 14 15 16 
n = 18: 
5
1 5 7 11 13 
n = 19: 
16
1 2 3 4 5 6 7 8 9 11 12 13 14 15 16 17 
n = 20: 
8
1 3 7 9 11 13 17 19 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后开始找规律，发现首先$n$为偶数时，答案中只有奇数。其次，$n$为奇数时，答案都是从$1\sim n-1$删去几个数构成的。&lt;/p&gt;
&lt;p&gt;当天有点迷糊，觉得肯定有进一步的规律，但没想出来是什么，就去求助了下学长。发现学长很早之前就已经给了个思路（那时我甚至不知道他说的是C题）——去掉所有与$n$不互素的数，然后特判$n=4k+2$的情况，这种时候要额外去掉$n-1$。我按这个标准核验了下表，发现似乎确实如此，于是码了下面的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int n;
vector&amp;lt;int&amp;gt; prime, ans;

bool check(int k) {
    int len = sqrt(k);
    for (int i = 2; i &amp;lt;= len; i++)
        if (k % i == 0) return false;
    return true;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    cin &amp;gt;&amp;gt; n;
    if (n &amp;lt; 5) return cout &amp;lt;&amp;lt; &amp;quot;1\n1\n&amp;quot;, 0;
    if (check(n)) {
        cout &amp;lt;&amp;lt; n - 2 &amp;lt;&amp;lt; endl;
        for (int i = 1; i &amp;lt; n - 2; i++)
            cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &#39; &#39;;
        cout &amp;lt;&amp;lt; n - 2 &amp;lt;&amp;lt; endl;
        return 0;
    }
    int tmp = n;
    while (tmp &amp;gt; 1) {
        for (int i = 2; i &amp;lt;= n; i++)
            if (tmp % i == 0) {
                tmp /= i;
                prime.emplace_back(i);
                break;
            }
    }
    for (int i = 1; i &amp;lt; n; i++) {
        bool flag = true;
        for (int it:prime) {
            if (i % it == 0) {
                flag = false;
                break;
            }
        }
        if (flag) ans.emplace_back(i);
    }
    if ((n - 2) % 4 == 0 &amp;amp;&amp;amp; ans.back() == n - 1) ans.pop_back();
    cout &amp;lt;&amp;lt; ans.size() &amp;lt;&amp;lt; endl;
    for (int i = 0; i &amp;lt; ans.size() - 1; i++) cout &amp;lt;&amp;lt; ans[i] &amp;lt;&amp;lt; &#39; &#39;;
    cout &amp;lt;&amp;lt; ans.back() &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后几秒钟没提交上去，当时还小伤心了会儿。结果最后等System Test结束后补交一发WA了，说明上面的贪心处理策略还是有问题的。&lt;/p&gt;
&lt;p&gt;不过研究互素的方向是正确的。&lt;/p&gt;
&lt;p&gt;首先我们假定选定的序列包含$a$，且其它数乘积为$x$（模$n$），那么有$x$是$a$的逆元，$a$就满足$\gcd(a,n)=1$，否则不能入选。&lt;/p&gt;
&lt;p&gt;我们把所有该选的$a$边累乘边取模，可以得到一个小于$n$的数$mul$，$mul$肯定与$n$互质，所以$mul$一定是在前面取过的，如果$mul\neq 1$，就不取这个数。&lt;/p&gt;
&lt;p&gt;我不太擅长数论题，只能一知半解借助Tutorial和网络资源理解理解，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

typedef long long ll;

int n;
vector&amp;lt;int&amp;gt; v;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    cin &amp;gt;&amp;gt; n;
    ll mul = 1;
    for (int i = 1; i &amp;lt; n; i++)
        if (__gcd(i, n) == 1) {
            mul = mul * i % n;
            v.emplace_back(i);
        }
    mul %= n;
    if (mul != 1)
        for (auto it = v.begin(); it != v.end(); it++)
            if (*it == mul) {
                v.erase(it);
                break;
            }
    cout &amp;lt;&amp;lt; v.size() &amp;lt;&amp;lt; endl;
    for (int i = 0; i &amp;lt; v.size() - 1; i++) cout &amp;lt;&amp;lt; v[i] &amp;lt;&amp;lt; &#39; &#39;;
    cout &amp;lt;&amp;lt; v.back() &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Codeforces Round 639 Div.2</title>
      <link>https://visors.github.io/post/codeforces-round-639-div.2/</link>
      <pubDate>Fri, 08 May 2020 12:13:12 +0800</pubDate>
      <guid>https://visors.github.io/post/codeforces-round-639-div.2/</guid>
      <description>&lt;p&gt;这场div本来应该在5月3日举办，结果因为数据库问题被挪到了5月6日。没想到当天，CF又挂了！！！漫长的队列导致一次提交可能要在半个小时甚至多个小时之后才能看到结果，于是这场比赛变成了unrated。不过这对我来说是个好事（明明是必须这样好吗），因为我的B题在提交后半个小时才返回WA结果，然后我检查代码发现打表打小了……于是又补交了一发，直到比赛结束的时候我都没有看见评测结果，第二天醒来才看见AC……总之这是一次体验糟糕的比赛。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;另B被人用暴力水过了……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;c---hilberts-hotelhttpscodeforcescomcontest1345problemc&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1345/problem/C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C - Hilbert&amp;rsquo;s Hotel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这题其实非常简单，比赛的时候想到了正解，不过不知道怎么验证。第二天YGL告诉我这样写就OK，我就认真想了下，好像确实是这么一回事。&lt;/p&gt;
&lt;p&gt;虽然考虑的整数是无穷的，但是我们可以人为的把它划分成长度为$n$的周期，题目其实就是对一个周期中的数按照$a[]$的值进行偏移。那么什么时候会空出房间呢？显然是两个不同不同的数在偏移过后得到了相同的结果呗。用数学的方式来表示，那就是&lt;/p&gt;
&lt;p&gt;$$
i+nk_i+a_i=j+nk_j+a_j
$$&lt;/p&gt;
&lt;p&gt;其中$i,j\in[0,n-1]$，$k$则是它们各自所在的周期位置，那么$i+nk_i$就是其对应的初始数字，然后我们再加上它的偏移量$a_i$，得到的就是偏移后的心的位置，对于$j$也是如此。&lt;/p&gt;
&lt;p&gt;那么很显然，上述式子仍然具有周期性，我们可以对等式两边取模&lt;/p&gt;
&lt;p&gt;$i+nk_i+a_i=j+nk_j+a_j$&lt;/p&gt;
&lt;p&gt;$(i+nk_i+a_i)\% n=(j+nk_j+a_j)\% n$&lt;/p&gt;
&lt;p&gt;$(i+a_i)\% n=(j+a_j)\% n$&lt;/p&gt;
&lt;p&gt;也就是说我们只需要判断一个周期$[0,n-1]$的重叠情况就可以了。&lt;/p&gt;
&lt;p&gt;当然这里存在一点细节，由于C/Java使用的是$Truncate$除法，所以如果负数对正数取模时，得到的结果可能是负数，实际编写时，为了防止下标越界，我们应该进一步处理&lt;/p&gt;
&lt;p&gt;$(i+a_i)\% n=(j+a_j)\% n$&lt;/p&gt;
&lt;p&gt;$((i+a_i)\% n+n)\% n=((j+a_j)\% n+n)\% n$&lt;/p&gt;
&lt;p&gt;取模在不同语言下得到的结果可能不同，这取决于语言遵循的取整方式，详细内容可以参考《&lt;a href=&#34;https://www.jianshu.com/p/452c1a5acd31&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;负数取模怎么算&lt;/a&gt;》&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
  * @Project Codeforces_Round__639__Div__2_
  * @Filename Hilberts_Hotel
  * @Author Visors
  * @Date 2020/5/8 11:26
  * @Version 1.0
  * @Description TODO
  **/

#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;
int T, n;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin &amp;gt;&amp;gt; T;
    while (T--) {
        cin &amp;gt;&amp;gt; n;
        vector&amp;lt;int&amp;gt; v(n);
        vector&amp;lt;bool&amp;gt; book(n, false);
        for (auto &amp;amp;it:v) cin &amp;gt;&amp;gt; it;
        for (int i = 0, tmp; i &amp;lt; n; i++) {
            tmp = (((v[i] + i) % n) + n) % n; //避免%出负数
            if (!book[tmp]) book[tmp] = true;
            else {
                cout &amp;lt;&amp;lt; &amp;quot;NO&amp;quot; &amp;lt;&amp;lt; endl;
                goto over;
            }
        }
        cout &amp;lt;&amp;lt; &amp;quot;YES&amp;quot; &amp;lt;&amp;lt; endl;
        over:;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;cf79342299.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Codeforces Round 637 Div.2</title>
      <link>https://visors.github.io/post/codeforces-round-637-div.2/</link>
      <pubDate>Fri, 24 Apr 2020 09:57:45 +0800</pubDate>
      <guid>https://visors.github.io/post/codeforces-round-637-div.2/</guid>
      <description>&lt;h2 id=&#34;碎碎念&#34;&gt;碎碎念&lt;/h2&gt;
&lt;p&gt;终于上分了真的，感觉可以冲到一两千名的（C代码出的时候提交还不多），结果C沉了，最终只有六千名。毕竟这次手稍微快hhh。本来以为我C的代码够简洁了，没想到正解好像更简洁……&lt;/p&gt;
&lt;p&gt;这次真的是非常遗憾，C和D都接近想到正解，却没有最终AC。另外吐槽一下本场的题面，是真的难读……不过题目质量还是在线的。&lt;/p&gt;
&lt;h2 id=&#34;解题报告&#34;&gt;解题报告&lt;/h2&gt;
&lt;h3 id=&#34;c---nastya-and-strange-generatorhttpscodeforcescomcontest1341problemc&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1341/problem/C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C - Nastya and Strange Generator&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;C的题目很难读，直接把LYH读崩了，所以这里我先简要翻译一下。&lt;/p&gt;
&lt;p&gt;本题需要我们按照规则检查题目给出的排列能否被生成。开始时排列$p$为空，然后我们按照以下规则依次将$1\sim n$填入排列，一开始$i=1$：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算$r$数组，$r[j]=min(t\in [j,n])$，其中$p[t]~is~empty$即没有被填过，如果不存在这样一个$j$，我们可以用$0$之类的特殊数表示&lt;/li&gt;
&lt;li&gt;计算$count$数组，$count[j]$为$r[]$中$j$的数目&lt;/li&gt;
&lt;li&gt;$count$数组中值最大的下标为$i$的可放置点&lt;/li&gt;
&lt;li&gt;将$i$放入排列，$i++$，转到1.，直到$n$个数被填完&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据这个规则，再结合样例解释，就能够理解了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C_Note.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果暴力，显然$O(n^2)$超时，这两个$n$分别是枚举每位数的时间和检查每个数能不能填的时间。我们可以考虑优化其中之一，枚举每位数显然很难优化，就看能否优化检查每个数的时间，只要降到$O(logn)$以下，本题就可解决。&lt;/p&gt;
&lt;p&gt;于是乎我们可以研究一下$r$和$count$的生成方法，很容易发现这两个数组在填$i$和$i+1$时是有一定的转移规律的。然后我想到的规律是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上一个数填在最右边，那么前面的$r$数组不会受影响，进而$count$数组也不会受影响，所以当前数可以填在任意空余位置。&lt;/li&gt;
&lt;li&gt;上一个数不在最右边，那么它只会直接影响它自己的$r$，使得其对应下标$r$变为其右边没填的最近的位置，进而打破$count$数组的平衡，使那个位置的count突然比别的多，这时候这个数必须填在那。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
  * @Project Codeforces_Round__637__Div__2_
  * @Filename Nastya_and_Strange_Generator
  * @Author Visors
  * @Date 2020/4/23 23:56
  * @Version 1.0
  * @Description TODO
  **/

#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstring&amp;gt;

using namespace std;
const int N = 1e5 + 5;
int T, n;
int pos[N];
bool book[N];

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin &amp;gt;&amp;gt; T;
    while (T--) {
        memset(book, 0, sizeof(book));
        cin &amp;gt;&amp;gt; n;
        for (int i = 1, t; i &amp;lt;= n; i++) {
            cin &amp;gt;&amp;gt; t;
            pos[t] = i;
        }
        int r = n;
        bool flag = true;
        book[pos[1]] = true;
        for (int i = 2; i &amp;lt;= n; i++) {
            if (pos[i - 1] != r) {
                int tmp = pos[i - 1];
                while (book[tmp]) tmp++;
                if (tmp != pos[i]) {
                    flag = false;
                    break;
                } else book[tmp] = true;
            }
            if (pos[i - 1] == r) {
                book[pos[i]] = true;
                r--;
            }
        }
        if (flag) cout &amp;lt;&amp;lt; &amp;quot;Yes&amp;quot; &amp;lt;&amp;lt; endl;
        else cout &amp;lt;&amp;lt; &amp;quot;No&amp;quot; &amp;lt;&amp;lt; endl;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是在第二个测试点错了，希望有读者能帮我指出一下问题在哪里。&lt;/p&gt;
&lt;p&gt;正解是判断有没有$p[i]-p[i-1]&amp;gt;1$，如果有那么不能生成。感觉跟我的比较像，不知道差异点是在哪里……&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/*
  * @Filename Nastya_and_Strange_Generator.cpp
  * @Author Visors
  * @Date 2020/4/24 11:07
  * @Version 1.0
  * @Description TODO
  **/

#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;
int T, n;
vector&amp;lt;int&amp;gt; p;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin &amp;gt;&amp;gt; T;
    while (T--) {
        cin &amp;gt;&amp;gt; n;
        p = vector&amp;lt;int&amp;gt;(n);
        cin &amp;gt;&amp;gt; p[0];
        bool flag = true;
        for (int i = 1; i &amp;lt; n; i++) {
            cin &amp;gt;&amp;gt; p[i];
            if (p[i] - p[i - 1] &amp;gt; 1) flag = false;
        }
        if (flag) cout &amp;lt;&amp;lt; &amp;quot;Yes&amp;quot; &amp;lt;&amp;lt; endl;
        else cout &amp;lt;&amp;lt; &amp;quot;No&amp;quot; &amp;lt;&amp;lt; endl;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;cf77872094.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;to be continue……&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Codeforces Round 636 Div.3</title>
      <link>https://visors.github.io/post/codeforces-round-636-div.3/</link>
      <pubDate>Wed, 22 Apr 2020 21:13:22 +0800</pubDate>
      <guid>https://visors.github.io/post/codeforces-round-636-div.3/</guid>
      <description>&lt;h2 id=&#34;碎碎念&#34;&gt;碎碎念&lt;/h2&gt;
&lt;p&gt;最近开始参加Codeforces Round——注册四五年，才打四五场比赛。&lt;/p&gt;
&lt;p&gt;不打打CF还不知道自己竟然这么菜，打个div3先是手速过慢被一众巨巨甩掉，后面偏难题目又A不掉不能实现弯道超车，菜的真实，后面还得加大力度，早日冲上1900分。&lt;/p&gt;
&lt;h2 id=&#34;解题报告&#34;&gt;解题报告&lt;/h2&gt;
&lt;h3 id=&#34;d---constant-palindrome-sumhttpscodeforcescomcontest1343problemd&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1343/problem/D&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;D - Constant Palindrome Sum&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这题看上去好想二分一波，但实际上并没有什么好的局部转移的规则。由于这场基本都是数学思维题，所以感觉这题也是这个方向。一开始被题面迷惑了一波，以为minimum是要每次改变最小的数，然后YY半天发现其实是最少次改变数……&lt;/p&gt;
&lt;p&gt;思考的时候已经发现了Tutorial中的三点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We don&amp;rsquo;t need to change anything in this pair;&lt;/li&gt;
&lt;li&gt;we can replace one element to fix this pair;&lt;/li&gt;
&lt;li&gt;we need to replace both elements to fix this pair.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也想到要hash各个pair对应的x值，不过因为题意读错的原因老是把两个时期的思维过程搞混，导致本Round直线下分，冷静想想自己已经找到近似解了，比赛的时候还是有点不太理智。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;其实思路非常简单，题目只考虑$a[i]+a[n-i+1]$，所以我们可以把$a[i]$和$a[n-i+1]$视为一对$pair$。&lt;/p&gt;
&lt;p&gt;首先我们读入所有的$pair$，然后对于每对$pair$，我们可以考虑将其三种分类下的作用范围转化为区间涂色问题。线段树可以解决区间涂色问题，但是在这里前缀和更优，参考color the ball那道题目。&lt;/p&gt;
&lt;p&gt;怎么将其转化为区间涂色问题呢？&lt;/p&gt;
&lt;p&gt;对于第一种分类，该$pair$和就为其简单相加。&lt;/p&gt;
&lt;p&gt;对于第二种分类，我们可以考虑固定$pair$的任意元素，改变另外一个元素。例如对于$pair&amp;lt;a,b&amp;gt;$，我们固定$a$，那么由于$b$的改动范围是$[1,k]$，所以整个$pair$的取值范围就是$[a+1,a+k]$，同理也可以固定$b$，改动$a$.&lt;/p&gt;
&lt;p&gt;对于第三种分类，若设全局$U=[2,2k]$，那么两种都需要改动的范围就是$U-([a+1,a+k]\cup [b+1,b+k]\cup {a+b })$啦&lt;/p&gt;
&lt;p&gt;从上述情况来看，我们可以声明两个数组，一个数组$pref$用来做前缀和，一个数组$cnt$来统计第一种分类出现的次数，这样就能知道取任意$x$时需要修改的次数，即$pref[x]-cnt[x]+2*(n/2-pref[x])$（第二种分类减去前缀和中多统计的第一种分类，再加上第三种分类）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
  * @Project Codeforces_Round__636__Div__3_
  * @Filename Constant_Palindrome_Sum
  * @Author Visors
  * @Date 2020/4/22 22:23
  * @Version 1.0
  * @Description TODO
  **/

#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;
int T, n, k, ans;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin &amp;gt;&amp;gt; T;
    while (T--) {
        cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
        vector&amp;lt;int&amp;gt; a(n), cnt(2 * k + 1), pref(2 * k + 2); //cnt pref多留一个空间避免超界，pref本身有可能操作2*k+1，所以这里+2
        for (auto &amp;amp;it:a) cin &amp;gt;&amp;gt; it; //Editor这么写的，我也学一波
        for (int i = 0; i &amp;lt; n / 2; i++) cnt[a[i] + a[n - i - 1]]++; //下标0开始，n-i+1变成n-i-1
        for (int i = 0; i &amp;lt; n / 2; i++) {
            int l1 = a[i] + 1, r1 = a[i] + k; //固定左边
            int l2 = a[n - i - 1] + 1, r2 = a[n - i - 1] + k; //固定右边
            pref[min(l1, l2)]++;
            pref[max(r1, r2) + 1]--;
        }
        for (int i = 1; i &amp;lt;= 2 * k + 1; i++) pref[i] += pref[i - 1];
        ans = 1e9;
        for (int x = 2; x &amp;lt;= 2 * k; x++) ans = min(ans, (pref[x] - cnt[x]) + 2 * (n / 2 - pref[x]));
        cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;cf77661481.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;e---weights-distributinghttpscodeforcescomcontest1343probleme&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1343/problem/E&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;E - Weights Distributing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这题虽然是2400分，但我觉得我是可写的，只是比赛连看都没看一眼，前面还需压缩时间。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这道题题面比较长，但其实核心问题比较简单：&lt;/p&gt;
&lt;p&gt;给定$n$个点$m$条边的无向联通图，先给定$m$个边权$p_i$，问如何分配边权，能使从点$a$到点$b$，再从点$b$到点$c$走过的权值最小。&lt;/p&gt;
&lt;p&gt;初读题目，可能会觉得这题过水——跑一遍从$a$到$b$的最短路，再跑一遍从$b$到$c$的最短路，然后贪心从小到大取边权，如果两个最短路中间有重复路段就优先取重复的部分。&lt;/p&gt;
&lt;p&gt;这种想法有可取之处，即把最终选取的路径分为了两类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;两段路有重合部分&lt;/li&gt;
&lt;li&gt;两段路没有重复部分&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但却忽视了关键问题，即求得的最短路很可能有多条，而选择其中的不同条，会产生不一样的分组结果。其实我们希望重复部分尽量多，但沿用上一方法很难处理。这时候如果把路径的选取看成这样：设两段路的交点为$x$，那么上面的两类可以被描述为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$a$-&amp;gt;$x$-&amp;gt;$b$-&amp;gt;$x$-&amp;gt;$c$&lt;/li&gt;
&lt;li&gt;$a$-&amp;gt;$b(x)$-&amp;gt;$c$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两种情况对应下图：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
	subgraph situation1
	a((a))--&amp;gt;x((x));
	x((x))--&amp;gt;b((b));
	b((b))--&amp;gt;x((x));
	x((x))--&amp;gt;c((c));
	end
	subgraph situation2
	A((a))--&amp;gt;B((b=x));
	B((b=x))--&amp;gt;C((c));
	end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;于是我们很容易想到求出$a,b,c$到各点的最短路，枚举$x$，找到最小的$dist(a,x)+2*dist(b,x)+dist(c,x)$即为题目要求的答案。&lt;/p&gt;
&lt;p&gt;因为我们一开始只需要求边数即边权为$1$的最短路径的长度，所以用BFS就可以处理。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
  * @Project Codeforces_Round__636__Div__3_
  * @Filename Weights_Distributing
  * @Author Visors
  * @Date 2020/4/23 21:03
  * @Version 1.0
  * @Description TODO
  **/

#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;queue&amp;gt;

using namespace std;
const int oo = 1e9 + 7;

int T, n, m, a, b, c;

vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; G; //内存占用大的声明在全局

void bfs(int v, vector&amp;lt;int&amp;gt; &amp;amp;dist) { //这里传的是引用，不会爆栈
    dist[v] = 0;
    queue&amp;lt;int&amp;gt; q;
    q.push(v);
    while (!q.empty()) {
        int t = q.front();
        q.pop();
        for (auto it:G[t]) {
            if (dist[it] == oo) {
                dist[it] = dist[t] + 1;
                q.push(it);
            }
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin &amp;gt;&amp;gt; T;
    while (T--) {
        cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;gt;&amp;gt; c;
        vector&amp;lt;int&amp;gt; p(m + 1);
        for (int i = 1; i &amp;lt;= m; i++) cin &amp;gt;&amp;gt; p[i];
        sort(p.begin() + 1, p.end()); //从大到小排序
        vector&amp;lt;long long&amp;gt; pref(m + 1); //求前缀和，方便后面快速取最小的路径
        for (int i = 1; i &amp;lt;= m; i++) pref[i] = pref[i - 1] + p[i];
        G = vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;(n + 1);
        for (int i = 1, s, t; i &amp;lt;= m; i++) {
            cin &amp;gt;&amp;gt; s &amp;gt;&amp;gt; t;
            G[s].push_back(t);
            G[t].push_back(s);
        }
        vector&amp;lt;int&amp;gt; distA(n + 1, oo), distB(n + 1, oo), distC(n + 1, oo);
        bfs(a, distA);
        bfs(b, distB);
        bfs(c, distC);
        long long ans = 1e18;
        for (int x = 1; x &amp;lt;= n; x++) {
            if (distA[x] + distB[x] + distC[x] &amp;gt; m) continue; //分不了直接跳过
            ans = min(ans, pref[distB[x]] + pref[distA[x] + distB[x] + distC[x]]);
            // = 2 * pref[distB[x]] + (pref[distA[x] + distB[x] + distC[x]] - pref[distB[x]])
        }
        cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;cf77762497.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
