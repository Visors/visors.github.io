<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lanqiao | Visors的个人主页</title>
    <link>https://visors.github.io/tag/lanqiao/</link>
      <atom:link href="https://visors.github.io/tag/lanqiao/index.xml" rel="self" type="application/rss+xml" />
    <description>lanqiao</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>©2022 万祚全 All rights reserved</copyright><lastBuildDate>Tue, 10 Nov 2020 19:53:31 +0800</lastBuildDate>
    <image>
      <url>https://visors.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>lanqiao</title>
      <link>https://visors.github.io/tag/lanqiao/</link>
    </image>
    
    <item>
      <title>第六届蓝桥杯国赛解题报告</title>
      <link>https://visors.github.io/post/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Tue, 10 Nov 2020 19:53:31 +0800</pubDate>
      <guid>https://visors.github.io/post/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</guid>
      <description>&lt;link href=&#34;https://fonts.googleapis.com/css2?family=Long+Cang&amp;display=swap&#34; rel=&#34;stylesheet&#34;&gt;
&lt;div style=&#34;font-family:&#39;Long Cang&#39;&#34;&gt;
&lt;center&gt;你是太阳 每个人都敬仰&lt;/center&gt;
&lt;center&gt;围著你 我变得不一样&lt;/center&gt;
&lt;center&gt;彩色希望 燃烧璨亮&lt;/center&gt;
&lt;center&gt;我的混沌找到方向&lt;/center&gt;
&lt;center&gt;我是冥王 每个人都遗忘&lt;/center&gt;
&lt;center&gt;抱著你 我发现我的光&lt;/center&gt;
&lt;center&gt;忘掉重量 感情漫长&lt;/center&gt;
&lt;center&gt;我的脆弱有你分享&lt;/center&gt;
&lt;center&gt;那么坚强&lt;/center&gt;
&lt;p align=&#34;right&#34;&gt;&lt;i&gt;——林奕匡《冥王星》&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;a href=&#34;#content&#34;&gt;&lt;i&gt;jump to content&lt;/i&gt;&lt;/a&gt;
&lt;p&gt;最近身体状况不太好，导致干事的热情和效率不是很高，今天突然被告知周末就是蓝桥国赛了，惊地赶紧加班加点做做真题、复习一些知识。虽然今年的省赛让我感觉做往年真题的意义不大（难度不是一个等级的），但是做总比不做要好，就当是一个自我检查，同时严格要求自己不能套板子，必须能按照自己的理解独立写出来。&lt;/p&gt;
&lt;h2 id=&#34;积分之谜&#34;&gt;积分之谜&lt;/h2&gt;
&lt;h3 id=&#34;问题描述&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;小明开了个网上商店，卖风铃。共有3个品牌：A，B，C。&lt;/p&gt;
&lt;p&gt;为了促销，每件商品都会返固定的积分。&lt;/p&gt;
&lt;p&gt;小明开业第一天收到了三笔订单：&lt;/p&gt;
&lt;p&gt;第一笔：3个A + 7个B + 1个C，共返积分：315&lt;/p&gt;
&lt;p&gt;第二笔：4个A + 10个B + 1个C，共返积分：420&lt;/p&gt;
&lt;p&gt;第三笔：A + B + C，共返积分&amp;hellip;.&lt;/p&gt;
&lt;p&gt;你能算出第三笔订单需要返积分多少吗？&lt;/p&gt;
&lt;p&gt;请提交该整数，不要填写任何多余的内容。&lt;/p&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;这就是个很简单的三元一次方程组，已知两方程，求另一方程的问题。&lt;/p&gt;
&lt;p&gt;设A返积分为$x$，B返积分为$y$，C返积分为$z$，由题意：
$$
\begin{cases}
3x+7y+z=315\\&lt;br&gt;
4x+10y+z=420
\end{cases}\Rightarrow
x+3y=105\&lt;br&gt;
$$
正好，待求式子：
$$
x+y+z=(4x+10y+z)-3(x+3y)=420-3*105=105
$$&lt;/p&gt;
&lt;h3 id=&#34;发散&#34;&gt;发散&lt;/h3&gt;
&lt;p&gt;对于线性方程组，还需回顾高斯消元这一知识。可以参考&lt;a href=&#34;https://blog.csdn.net/u011815404&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Alex_McAvoy&lt;/a&gt;的博客《&lt;a href=&#34;https://blog.csdn.net/u011815404/article/details/88890702&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;线性代数 —— 高斯消元法&lt;/a&gt;》&lt;/p&gt;
&lt;h2 id=&#34;完美正方形&#34;&gt;完美正方形&lt;/h2&gt;
&lt;h3 id=&#34;问题描述-1&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;如果一些边长互不相同的正方形，可以恰好拼出一个更大的正方形，则称其为完美正方形。&lt;/p&gt;
&lt;p&gt;历史上，人们花了很久才找到了若干完美正方形。比如：如下边长的22个正方形&lt;/p&gt;
&lt;p&gt;2 3 4 6 7 8 12 13 14 15 16 17 18 21 22 23 24 26 27 28 50 60&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;图1.png&#34; alt=&#34;图1&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如【图1.png】那样组合，就是一种解法。此时，&lt;/p&gt;
&lt;p&gt;紧贴上边沿的是：60 50&lt;/p&gt;
&lt;p&gt;紧贴下边沿的是：26 28 17 21 18&lt;/p&gt;
&lt;p&gt;22阶完美正方形一共有8种。下面的组合是另一种：&lt;/p&gt;
&lt;p&gt;2 5 9 11 16 17 19 21 22 24 26 30 31 33 35 36 41 46 47 50 52 61&lt;/p&gt;
&lt;p&gt;如果告诉你该方案紧贴着上边沿的是从左到右依次为：47 46 61，&lt;/p&gt;
&lt;p&gt;你能计算出紧贴着下边沿的是哪几个正方形吗？&lt;/p&gt;
&lt;p&gt;请提交紧贴着下边沿的正方形的边长，从左到右，用空格分开。&lt;/p&gt;
&lt;p&gt;不要填写任何多余的内容或说明文字。&lt;/p&gt;
&lt;h3 id=&#34;分析-1&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;开始时试图手玩，然后试着按这种思想操作了一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;边长小的大概率在中间补空&lt;/li&gt;
&lt;li&gt;直接挑边界，挑出来的边界应该满足左边和为107，右边和为83，下面的和为154&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是画了会，觉得这样无法确定是否是可行解，而且能够满足上述条件的构造方法也不唯一，&lt;strong&gt;就算我得到了下面一行的数，我还是需要判断是否可行，才能确定这几个数的顺序&lt;/strong&gt;，遂放弃。&lt;/p&gt;
&lt;p&gt;事实上对于填空题而言，能出结果是第一，算法运行效率是其次，只要不慢到出不了结果，最后填上去，都是一样的。那么我们不妨直接暴力解决。&lt;/p&gt;
&lt;p&gt;如果从线段长度（区间来考虑）会很复杂，我们不妨简单点，就把整个图案看成点阵，这样的话，题目中给出的上边沿的正方形的边长是47 46 61这一条件，就可以被解读为我们要对一个154*154的正方形点阵做覆盖，其中上边沿已经覆盖了三个正方形。&lt;/p&gt;
&lt;p&gt;由于最后所有点都会被覆盖，所以我们可以简单的考虑，对任意一个未覆盖的点搜索，依次尝试每一种覆盖情况，最终找到一组合法的解即可。写的时候，完全没必要为了效率而想一些高级方法，比如判断当前位置能不能放特定正方形，只需要两个for遍历检查一下就行了，最大程度减少代码量并避免出错——一旦出错，耗费的Debug时间可不是一会儿半会儿。&lt;/p&gt;
&lt;h3 id=&#34;参考代码&#34;&gt;参考代码&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//
// Created by Visors on 2020/11/10.
//
// 题目名：完美正方形
// 题目来源：第六届蓝桥杯国赛
// 题目链接：TODO
// 算法：WanMeiZhengFangXing.cpp
// 用途：TODO
// 时间复杂度：O(TODO)
//

#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int G[154][154];

// 这里的顺序基于我的贪心思想，如果小的正方形放在前面，则搜索树前几层宽度会很大
vector&amp;lt;int&amp;gt; squares{22, 24, 26, 30, 31, 33, 35, 36, 41, 50, 52, 2, 5, 9, 11, 16, 17, 19, 21};
vector&amp;lt;bool&amp;gt; used; // 记录正方形是否被使用过
vector&amp;lt;int&amp;gt; ans; // 记录最后一行答案
bool getAns = false; // 是否找到解

bool checkFill(int x, int y, int len) {
    // 填进去越界了，肯定不行
    if (x + len &amp;gt; 154 || y + len &amp;gt; 154) return false;
    // 填的正方形位置里有一个被填都不行
    for (int i = 0; i &amp;lt; len; i++)
        for (int j = 0; j &amp;lt; len; j++)
            if (G[x + i][y + j]) return false;
    return true;
}

void dfs(int x, int y) {
//    cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &#39; &#39; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; endl;
    if (getAns) return; // 找到答案立即停止搜索
    for (int i = 0; i &amp;lt; squares.size(); i++) {
        if (getAns) break; // 找到答案立即停止搜索
        if (!used[i]) {
            int &amp;amp;len = squares[i];
            if (checkFill(x, y, len)) {
                // 填上
                used[i] = true;
                for (int j = 0; j &amp;lt; len; j++)
                    for (int k = 0; k &amp;lt; len; k++)
                        G[x + j][y + k] = len;
                // 如果填的最后一行是下沿，丢进ans
                if (x + len == 154) ans.push_back(len);
                // 找下一个填的起始位置（从上到下，从左到右）
                // 直接暴力找，不用优化
                bool completed = true, flag = false;
                for (int j = 0; j &amp;lt; 154; j++) {
                    for (int k = 0; k &amp;lt; 154; k++)
                        if (!G[j][k]) {
                            dfs(j, k);
                            completed = false;
                            flag = true;
                            break; // 别忘了这个break只会跳出内层循环，用下面的flag处理下
                        }
                    if (flag) break;
                }
                if (completed) {
                    getAns = true;
                    break;
                }
                if (getAns) break;
                // 回溯，撤回决策
                used[i] = false;
                for (int j = 0; j &amp;lt; len; j++)
                    for (int k = 0; k &amp;lt; len; k++)
                        G[x + j][y + k] = 0;
                if (x + len == 154) ans.pop_back();
            }
        }
    }
}

int main() {
//    ios_base::sync_with_stdio(false);
//    cin.tie(nullptr), cout.tie(nullptr);
    freopen(&amp;quot;ans.out&amp;quot;, &amp;quot;w&amp;quot;, stdout);
    used.resize(squares.size());
    for (int i = 0; i &amp;lt; 47; i++)
        for (int j = 0; j &amp;lt; 47; j++)
            G[i][j] = 47;
    for (int i = 0; i &amp;lt; 46; i++)
        for (int j = 47; j &amp;lt; 93; j++)
            G[i][j] = 46;
    for (int i = 0; i &amp;lt; 61; i++)
        for (int j = 93; j &amp;lt; 154; j++)
            G[i][j] = 61;
    dfs(46, 47);
    for (int it:ans) cout &amp;lt;&amp;lt; it &amp;lt;&amp;lt; &#39; &#39;;
    cout &amp;lt;&amp;lt; endl;
    for (int i = 0; i &amp;lt; 154; i++) {
        for (int j = 0; j &amp;lt; 154; j++)
            printf(&amp;quot;%3d&amp;quot;, G[i][j]);
        printf(&amp;quot;\n&amp;quot;);
    }
    fclose(stdout);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;发散-1&#34;&gt;发散&lt;/h3&gt;
&lt;p&gt;上述代码中，我求得答案为“50 41 33 30”，我在网上看到另一篇博客中给出的答案是“50 33 30 41”，于是加了个文件输出看了一下，我的答案大约的确是对的，也就是说本题可能有多种合法答案。验证这句话有个简单的方法，就是改改我代码里squares中元素的顺序，而不用去严格证明，不过我就懒得去试了。&lt;/p&gt;
&lt;p&gt;这里有高人&lt;a href=&#34;https://blog.csdn.net/Lonverce&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lonverce&lt;/a&gt;加了线段树优化的版本《&lt;a href=&#34;https://blog.csdn.net/lonverce/article/details/51436195&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;( 题解 )第六届蓝桥杯决赛试题 &amp;ndash; 完美正方形 (线段树 + 深搜)&lt;/a&gt;》&lt;/p&gt;
&lt;h2 id=&#34;关联账户&#34;&gt;关联账户&lt;/h2&gt;
&lt;h3 id=&#34;问题描述-2&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;为增大反腐力度，某地警方专门支队，对若干银行账户展开调查。&lt;/p&gt;
&lt;p&gt;如果两个账户间发生过转账，则认为有关联。如果a,b间有关联, b,c间有关联，则认为a,c间也有关联。&lt;/p&gt;
&lt;p&gt;对于调查范围内的n个账户（编号0到n-1），警方已知道m条因转账引起的直接关联。&lt;/p&gt;
&lt;p&gt;现在希望知道任意给定的两个账户，求出它们间是否有关联。有关联的输出1，没有关联输出0&lt;/p&gt;
&lt;p&gt;小明给出了如下的解决方案：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#define N 100

int connected(int* m, int p, int q)
{
	return m[p]==m[q]? 1 : 0;
}

void link(int* m, int p, int q)
{
	int i;
	if(connected(m,p,q)) return;
	int pID = m[p];
	int qID = m[q];
	for(i=0; i&amp;lt;N; i++) _____________________________________;  //填空位置
}

int main()
{
	int m[N];
	int i;
	for(i=0; i&amp;lt;N; i++) m[i] = i; //初始状态，每个节点自成一个连通域
	link(m,0,1); //添加两个账户间的转账关联
	link(m,1,2); 
	link(m,3,4); 
	link(m,5,6); 
	link(m,6,7); 
	link(m,8,9); 
	link(m,3,7); 
	
	printf(&amp;quot;%d &amp;quot;, connected(m,4,7));
	printf(&amp;quot;%d &amp;quot;, connected(m,4,5));
	printf(&amp;quot;%d &amp;quot;, connected(m,7,9));
	printf(&amp;quot;%d &amp;quot;, connected(m,9,2));
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;请分析源代码，并提交划线部分缺少的代码。不要填写已有代码或任何多余内容。&lt;/p&gt;
&lt;h3 id=&#34;分析-2&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;这个问题拿到手，当然一眼出并查集啦！不过出题人非要给你个思路，让你在上面做文章，那我们先分析下代码中例子的情况：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
0 --- 1
1 --- 2
3 --- 4
5 --- 6
6 --- 7
8 --- 9
3 --- 7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以首先，我们把代码copy到本地，填完空后，我们输出的结果必须是“1 1 0 0”（填对了一定是这个答案，是这个答案不一定填对了）。&lt;/p&gt;
&lt;p&gt;我们再分析下题目给出的算法，emmm这就是传说中的$O(n)$合并？？对于该算法，每次合并时将所有同集合元素的m更新为相同值，这样查询时只需要$O(1)$判断下两者m值是否相同即可。算法正确性可用归纳法证明。&lt;/p&gt;
&lt;p&gt;按照上述意思，补全的代码应该是&lt;code&gt;if (connected(m, pID, i) m[i] = qID&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;密文搜索&#34;&gt;密文搜索&lt;/h2&gt;
&lt;h3 id=&#34;问题描述-3&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;福尔摩斯从X星收到一份资料，全部是小写字母组成。&lt;/p&gt;
&lt;p&gt;他的助手提供了另一份资料：许多长度为8的密码列表。&lt;/p&gt;
&lt;p&gt;福尔摩斯发现，这些密码是被打乱后隐藏在先前那份资料中的。&lt;/p&gt;
&lt;p&gt;请你编写一个程序，从第一份资料中搜索可能隐藏密码的位置。要考虑密码的所有排列可能性。&lt;/p&gt;
&lt;h4 id=&#34;数据格式&#34;&gt;数据格式&lt;/h4&gt;
&lt;p&gt;输入第一行：一个字符串s，全部由小写字母组成，长度小于1024*1024&lt;/p&gt;
&lt;p&gt;紧接着一行是一个整数n,表示以下有n行密码，1&amp;lt;=n&amp;lt;=1000&lt;/p&gt;
&lt;p&gt;紧接着是n行字符串，都是小写字母组成，长度都为8&lt;/p&gt;
&lt;h4 id=&#34;要求输出&#34;&gt;要求输出&lt;/h4&gt;
&lt;p&gt;一个整数, 表示每行密码的所有排列在s中匹配次数的总和。&lt;/p&gt;
&lt;h4 id=&#34;例如&#34;&gt;例如&lt;/h4&gt;
&lt;p&gt;用户输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aaaabbbbaabbcccc
2
aaaabbbb
abcabccc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;则程序应该输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是因为：第一个密码匹配了3次，第二个密码匹配了1次，一共4次。&lt;/p&gt;
&lt;h4 id=&#34;资源约定&#34;&gt;资源约定&lt;/h4&gt;
&lt;p&gt;峰值内存消耗 &amp;lt; 512M&lt;/p&gt;
&lt;p&gt;CPU消耗  &amp;lt; 3000ms&lt;/p&gt;
&lt;h3 id=&#34;分析-3&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;讲实在话，这题看了半天没看懂意思，第一个密码怎么匹配了3次？“要考虑密码的所有排列可能性”是什么意思？可能语文不好不配打蓝桥= =&lt;/p&gt;
&lt;p&gt;在网上看了下别人的代码，才知道原来意思是对于s中任意长度为8的子串，判断其排列后能得到给定密码的数目和（这tm……我直接迷惑）。&lt;/p&gt;
&lt;h4 id=&#34;法一-brute-force&#34;&gt;法一 Brute Force&lt;/h4&gt;
&lt;p&gt;我们可以枚举s中每一个长度为8的子串，然后统计串中各字符出现次数。对于任意密码，逐一检查密码中的字符个数与子串字符个数是否匹配，匹配答案就+1。这样的复杂度是$O(n*s.length)$，显然会T一些点。&lt;/p&gt;
&lt;p&gt;因为BF很不优雅还不能把分拿满，这里就不写了。&lt;/p&gt;
&lt;h4 id=&#34;法二-算术基本定理hash&#34;&gt;法二 算术基本定理+Hash&lt;/h4&gt;
&lt;p&gt;根据算术基本定理，任何一个大于1的自然数都能被分为有限个质数之积（或者它本身就是质数），且这个分解是唯一的。&lt;/p&gt;
&lt;p&gt;根据这一定理，我们很容易想到，如果让每个字母表示不同的质数，那么整个字符串就能被Hash为其质数积，这样的Hash方法是不会有冲突的，因为分解是唯一的，所以不会有两个不一样的串Hash值相同。&lt;/p&gt;
&lt;p&gt;那么我们就设&amp;rsquo;a&#39;&amp;lsquo;b&#39;&amp;lsquo;c&amp;rsquo;等字符为前26个质数，然后对原串s中所有的长度为8的子串Hash后记录在map里。然后每度入一个密码，累加改Hash值出现的次数即可，算法复杂度为$O(s.length*\log(s.legnth)+nlog(s.length))$。子串长度只有8，所以Hash值也不会爆long long（第26个素数是101）。&lt;/p&gt;
&lt;h3 id=&#34;参考代码-1&#34;&gt;参考代码&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//
// Created by Visors on 2020/11/11.
//
// 题目名：密文搜索
// 题目来源：第六届蓝桥杯国赛
// 题目链接：https://www.dotcpp.com/oj/problem1828.html
// 算法：算术基本定理+Hash
// 用途：TODO
// 时间复杂度：$O(s.length*\log(s.legnth)+nlog(s.length))$
//

#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

vector&amp;lt;int&amp;gt; value{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
                  43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101};
unordered_map&amp;lt;long long, int&amp;gt; book;

string s, t;
int n, ans = 0;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    cin &amp;gt;&amp;gt; s;
    // 题目没有明说s长度范围，所以特判一下
    if (s.length() &amp;gt;= 8) {
        long long mul = 1;
        for (int i = 0; i &amp;lt; 8; i++) mul *= value[s[i] - &#39;a&#39;];
        book[mul]++;
        for (int i = 8; i &amp;lt; s.length(); i++) {
            // 一除一乘，优化常数
            mul /= value[s[i - 8] - &#39;a&#39;];
            mul *= value[s[i] - &#39;a&#39;];
            book[mul]++;
        }
    }
    cin &amp;gt;&amp;gt; n;
    while (n--) {
        cin &amp;gt;&amp;gt; t;
        if (s.length() &amp;lt; 8) continue;
        long long mul = 1;
        for (char c:t) mul *= value[c - &#39;a&#39;];
        ans += book[mul];
    }
    if (s.length() &amp;lt; 8) cout &amp;lt;&amp;lt; &amp;quot;0\n&amp;quot;;
    else cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;吐槽&#34;&gt;吐槽&lt;/h3&gt;
&lt;p&gt;这个题面真的神了，“这些密码是被打乱后隐藏在先前那份资料中的”让我以为这题是对给出的所有密码找到最大不冲突匹配数。&lt;/p&gt;
&lt;p&gt;然后这个乱序到底是取子串还是子序列，也没有说明白。我觉得既然都打乱了应该就是子序列吧，结果博客里面都是直接当作子串写的，莽一发直接过了。&lt;/p&gt;
&lt;p&gt;可能是五年前蓝桥题目质量还不够好吧……&lt;/p&gt;
&lt;h2 id=&#34;居民集会&#34;&gt;居民集会&lt;/h2&gt;
&lt;h3 id=&#34;题目描述&#34;&gt;题目描述&lt;/h3&gt;
&lt;p&gt;蓝桥村的居民都生活在一条公路的边上，公路的长度为L，每户家庭的位置都用这户家庭到公路的起点的距离来计算，第i户家庭距起点的距离为di。&lt;/p&gt;
&lt;p&gt;每年，蓝桥村都要举行一次集会。今年，由于村里的人口太多，村委会决定要在4个地方举行集会，其中3个位于公路中间，1个位最公路的终点。&lt;/p&gt;
&lt;p&gt;已知每户家庭都会向着远离公路起点的方向去参加集会，参加集会的路程开销为家庭内的人数ti与距离的乘积。&lt;/p&gt;
&lt;p&gt;给定每户家庭的位置di和人数ti，请为村委会寻找最好的集会举办地：p1, p2, p3, p4 (p1&amp;lt;=p2&amp;lt;=p3&amp;lt;=p4=L),使得村内所有人的路程开销和最小。&lt;/p&gt;
&lt;h4 id=&#34;输入格式&#34;&gt;输入格式&lt;/h4&gt;
&lt;p&gt;输入的第一行包含两个整数n, L，分别表示蓝桥村的家庭数和公路长度。&lt;/p&gt;
&lt;p&gt;接下来n行，每行两个整数di, ti，分别表示第i户家庭距离公路起点的距离和家庭中的人数。&lt;/p&gt;
&lt;h4 id=&#34;输出格式&#34;&gt;输出格式&lt;/h4&gt;
&lt;p&gt;输出一行，包含一个整数，表示村内所有人路程的开销和。&lt;/p&gt;
&lt;h4 id=&#34;样例输入&#34;&gt;样例输入&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;6 10
1 3
2 2
4 5
5 20
6 5
8 7
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;样例输出&#34;&gt;样例输出&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;18
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;样例说明&#34;&gt;样例说明&lt;/h4&gt;
&lt;p&gt;在距起点2, 5, 8, 10这4个地方集会，6个家庭需要的走的距离分别为1, 0, 1, 0, 2, 0，总的路程开销为1*3+0*2+1*5+0*20+2*5+0*7=18。&lt;/p&gt;
&lt;h4 id=&#34;数据规模与约定&#34;&gt;数据规模与约定&lt;/h4&gt;
&lt;p&gt;对于10%的评测数据，1&amp;lt;=n&amp;lt;=300。&lt;/p&gt;
&lt;p&gt;对于30%的评测数据，1&amp;lt;=n&amp;lt;=2000，1&amp;lt;=L&amp;lt;=10000，0&amp;lt;=di&amp;lt;=L，di&amp;lt;=di+1，0&amp;lt;=ti&amp;lt;=20。&lt;/p&gt;
&lt;p&gt;对于100%的评测数据，1&amp;lt;=n&amp;lt;=100000，1&amp;lt;=L&amp;lt;=1000000，0&amp;lt;=di&amp;lt;=L，di&amp;lt;=di+1，0&amp;lt;=ti&amp;lt;=1000000。&lt;/p&gt;
&lt;h4 id=&#34;资源约定-1&#34;&gt;资源约定&lt;/h4&gt;
&lt;p&gt;峰值内存消耗 &amp;lt; 512M&lt;/p&gt;
&lt;p&gt;CPU消耗  &amp;lt; 5000ms&lt;/p&gt;
&lt;h3 id=&#34;分析-4&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;显然，题目中的p1,p2,p3应在三个不同的家庭处，那么BF枚举三个点的位置再加上前缀和优化，就能$O(n^3)$求解，但这个复杂度太差了。&lt;/p&gt;
&lt;p&gt;前缀和如何优化？如果你把居民从家走到集会点看成从家走到p4，再减去p4到其集会点的距离，则对于划分出的一个区间，其减去的值的和应为区间内的人数（前缀和处理）*l-集会点距起点的距离。&lt;/p&gt;
&lt;p&gt;因着这个，我跟队友讨论了下，莽了个假算法：先枚举p2，然后在左右区间分别三分找p1和p2。交了一下WA了，似乎两遍区间内函数并不是单峰函数，这个算法有问题，不过可以过部分点。不过由于不是官方评测，可能数据有问题，毕竟过的人数只有个位数……&lt;/p&gt;
&lt;h3 id=&#34;参考代码-2&#34;&gt;参考代码&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//
// Created by Visors on 2020/11/11.
//
// 题目名：居民集会
// 题目来源：第六届蓝桥杯国赛
// 题目链接：https://www.dotcpp.com/oj/problem1829.html
// 算法：JuMinJiHui.cpp
// 用途：TODO
// 时间复杂度：O(TODO)
//

#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

typedef long long ll;
typedef pair&amp;lt;int, int&amp;gt; pii;

int n, l;
set&amp;lt;int&amp;gt; s;
vector&amp;lt;pii&amp;gt; families;
vector&amp;lt;ll&amp;gt; preSum;
int p1, p2, p3;

inline ll getPreSum(int left, int right) {
    return preSum[right + 1] - preSum[left];
}

inline ll f1(int x) {
    return getPreSum(0, x) * (l - families[x].first) + getPreSum(x + 1, p2) * (l - families[p2].first);
}

inline ll f2(int x) {
    return getPreSum(p2 + 1, x) * (l - families[x].first);
}

int sanfen1(int left, int right) {
    while (left &amp;lt; right - 1) {
        int mid1 = (left + right) / 2,
                mid2 = (mid1 + right) / 2;
        if (f1(mid1) &amp;gt; f1(mid2)) right = mid2;
        else left = mid1;
    }
    return f1(left) &amp;gt; f1(right) ? left : right;
}

int sanfen2(int left, int right) {
    while (left &amp;lt; right - 1) {
        int mid1 = (left + right) / 2,
                mid2 = (mid1 + right) / 2;
        if (f2(mid1) &amp;gt; f2(mid2)) right = mid2;
        else left = mid1;
    }
    return f2(left) &amp;gt; f2(right) ? left : right;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; l;
    families.resize(n);
    preSum.resize(n + 1);
    for (pii &amp;amp;it:families) {
        cin &amp;gt;&amp;gt; it.first &amp;gt;&amp;gt; it.second;
        s.insert(it.first);
    }
    if (s.size() &amp;lt;= 3) {
        cout &amp;lt;&amp;lt; &amp;quot;0\n&amp;quot;;
        return 0;
    }
    sort(families.begin(), families.end());
    preSum[0] = 0;
    for (int i = 1; i &amp;lt;= n; i++)
        preSum[i] = preSum[i - 1] + families[i - 1].second;
    ll Sum = 0;
    for (pii it:families) Sum += (l - it.first) * it.second;
    ll ans = 0x3f3f3f3f3f3f3f3f;
    for (int i = 1; i &amp;lt; n - 1; i++) {
        p2 = i;
        p1 = sanfen1(0, p2 - 1);
        p3 = sanfen2(p2 + 1, n - 1);
        ans = min(ans, Sum - f1(p1) - f2(p3));
    }
    cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;发散-2&#34;&gt;发散&lt;/h3&gt;
&lt;p&gt;更好的写法是DP，这个DP并不难想，不过不知道为什么当初讨论着讨论着就开始三分了，可能是因为我们都想把分拿满吧。经过前缀和优化后，DP可以$O(n^2)$出解，有大佬指出该DP可以斜率优化，不过我不懂……&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Baobab_Tree&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;名道&lt;/a&gt;《&lt;a href=&#34;https://blog.csdn.net/Baobab_Tree/article/details/90109757&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;15年国赛 居民集会&lt;/a&gt;》&lt;/p&gt;
&lt;h2 id=&#34;模型染色&#34;&gt;模型染色&lt;/h2&gt;
&lt;h3 id=&#34;题目描述-1&#34;&gt;题目描述&lt;/h3&gt;
&lt;p&gt;在电影《超能陆战队》中，小宏可以使用他的微型机器人组合成各种各样的形状。&lt;/p&gt;
&lt;p&gt;现在他用他的微型机器人拼成了一个大玩具给小朋友们玩。为了更加美观，他决定给玩具染色。&lt;/p&gt;
&lt;p&gt;小宏的玩具由n个球型的端点和m段连接这些端点之间的边组成。下图给出了一个由5个球型端点和4条边组成的玩具，看上去很像一个分子的球棍模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./图2.png&#34; alt=&#34;图2&#34; style=&#34;zoom:33%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由于小宏的微型机器人很灵活，这些球型端点可以在空间中任意移动，同时连接相邻两个球型端点的边可以任意的伸缩，这样一个玩具可以变换出不同的形状。在变换的过程中，边不会增加，也不会减少。&lt;/p&gt;
&lt;p&gt;小宏想给他的玩具染上不超过k种颜色，这样玩具看上去会不一样。如果通过变换可以使得玩具变成完全相同的颜色模式，则认为是本质相同的染色。现在小宏想知道，可能有多少种本质不同的染色。&lt;/p&gt;
&lt;h4 id=&#34;输入格式-1&#34;&gt;输入格式&lt;/h4&gt;
&lt;p&gt;输入的第一行包含三个整数n, m, k，&lt;/p&gt;
&lt;p&gt;分别表示小宏的玩具上的端点数、边数和小宏可能使用的颜色数。端点从1到n编号。&lt;/p&gt;
&lt;p&gt;接下来m行每行两个整数a, b，表示第a个端点和第b个端点之间有一条边。输入保证不会出现两条相同的边。&lt;/p&gt;
&lt;h4 id=&#34;输出格式-1&#34;&gt;输出格式&lt;/h4&gt;
&lt;p&gt;输出一行，表示本质不同的染色的方案数。由于方案数可能很多，请输入方案数除10007的余数。&lt;/p&gt;
&lt;h4 id=&#34;样例输入-1&#34;&gt;样例输入&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;3 2 2
1 2
3 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;样例输出-1&#34;&gt;样例输出&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;样例说明-1&#34;&gt;样例说明&lt;/h4&gt;
&lt;p&gt;令(a, b, c)表示第一个端点染成a，第二个端点染成b，第三个端点染成c，则下面6种本质不同的染色：(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2), (2, 1, 2), (2, 2, 2)。&lt;/p&gt;
&lt;p&gt;而(2, 1, 1)与(1, 1, 2)是本质相同的，(2, 2, 1)与(2, 1, 2)是本质相同的。&lt;/p&gt;
&lt;h4 id=&#34;数据规模与约定-1&#34;&gt;数据规模与约定&lt;/h4&gt;
&lt;p&gt;对于20%的评测数据，1&amp;lt;=n&amp;lt;=5， 1&amp;lt;=k&amp;lt;=2。&lt;/p&gt;
&lt;p&gt;对于50%的评测数据，1&amp;lt;=n&amp;lt;=10, 1&amp;lt;=k&amp;lt;=8。&lt;/p&gt;
&lt;p&gt;对于100%的评测数据，1&amp;lt;=n&amp;lt;=10, 1&amp;lt;=m&amp;lt;=45, 1&amp;lt;=k&amp;lt;=30。&lt;/p&gt;
&lt;h4 id=&#34;资源约定-2&#34;&gt;资源约定&lt;/h4&gt;
&lt;p&gt;峰值内存消耗 &amp;lt; 512M&lt;/p&gt;
&lt;p&gt;CPU消耗  &amp;lt; 5000ms&lt;/p&gt;
&lt;h3 id=&#34;分析-5&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;我只会暴力……大佬说用Polya定理，虽然以前接触过，不过已经忘干净了……&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Baobab_Tree&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;名道&lt;/a&gt;《&lt;a href=&#34;https://blog.csdn.net/Baobab_Tree/article/details/90109956&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;15年国赛 模型染色&lt;/a&gt;》&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;这么看上去国赛大题想拿满分并不简单，不知道到时候同台竞技的人水平如何，突然有一点小虚。&lt;/p&gt;
&lt;div id=&#34;content&#34;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#积分之谜&#34;&gt;积分之谜&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#问题描述&#34;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#分析&#34;&gt;分析&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#发散&#34;&gt;发散&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#完美正方形&#34;&gt;完美正方形&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#问题描述-1&#34;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#分析-1&#34;&gt;分析&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#参考代码&#34;&gt;参考代码&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#发散-1&#34;&gt;发散&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#关联账户&#34;&gt;关联账户&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#问题描述-2&#34;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#分析-2&#34;&gt;分析&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#密文搜索&#34;&gt;密文搜索&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#问题描述-3&#34;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#分析-3&#34;&gt;分析&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#参考代码-1&#34;&gt;参考代码&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#吐槽&#34;&gt;吐槽&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#居民集会&#34;&gt;居民集会&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#题目描述&#34;&gt;题目描述&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#分析-4&#34;&gt;分析&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#参考代码-2&#34;&gt;参考代码&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#发散-2&#34;&gt;发散&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#模型染色&#34;&gt;模型染色&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#题目描述-1&#34;&gt;题目描述&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#分析-5&#34;&gt;分析&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#后记&#34;&gt;后记&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>蓝桥省赛模拟</title>
      <link>https://visors.github.io/post/%E8%93%9D%E6%A1%A5%E7%9C%81%E8%B5%9B%E6%A8%A1%E6%8B%9F/</link>
      <pubDate>Sat, 25 Apr 2020 11:25:07 +0800</pubDate>
      <guid>https://visors.github.io/post/%E8%93%9D%E6%A1%A5%E7%9C%81%E8%B5%9B%E6%A8%A1%E6%8B%9F/</guid>
      <description>&lt;h2 id=&#34;填空题&#34;&gt;填空题&lt;/h2&gt;
&lt;p&gt;对于填空题，其实很多时候枚举啊之类的就完事了。但是作为整理，我认为认真的态度是把它当成独立的可以用编程解决的普适的问题来分析，所以下面我会写上每道题的题目改编及思路。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;问题描述&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;将LANQIAO中的字母重新排列，可以得到不同的单词，如LANQIAO、AAILNOQ等，注意这7个字母都要被用上，单词不一定有具体的英文意义。
请问，总共能排列如多少个不同的单词。&lt;/p&gt;
&lt;h3 id=&#34;答案&#34;&gt;答案&lt;/h3&gt;
&lt;p&gt;$2520$&lt;/p&gt;
&lt;h3 id=&#34;改编&#34;&gt;改编&lt;/h3&gt;
&lt;p&gt;给定一个字符串，求可以得到的排列数。&lt;/p&gt;
&lt;h4 id=&#34;戏说&#34;&gt;戏说&lt;/h4&gt;
&lt;p&gt;根据组合数学原理，统计不同的字符数$n$，以及不同字符出现的个数$tot[i]$，那么结果即为$\frac{n!}{\prod_{i=1}^n{tot[i]!}}$&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;问题描述-1&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;一个包含有2019个结点的无向连通图，最少包含多少条边？&lt;/p&gt;
&lt;h3 id=&#34;答案-1&#34;&gt;答案&lt;/h3&gt;
&lt;p&gt;$2018$&lt;/p&gt;
&lt;h3 id=&#34;改编一&#34;&gt;改编一&lt;/h3&gt;
&lt;p&gt;一个包含有$n$个结点的无向连通图，最少包含多少条边？&lt;/p&gt;
&lt;h4 id=&#34;戏说-1&#34;&gt;戏说&lt;/h4&gt;
&lt;p&gt;该图应为一条链，边数为$n-1$&lt;/p&gt;
&lt;h3 id=&#34;改编二&#34;&gt;改编二&lt;/h3&gt;
&lt;p&gt;一个包含有$n$个结点的无向连通图，最多包含多少条边？&lt;/p&gt;
&lt;h4 id=&#34;戏说-2&#34;&gt;戏说&lt;/h4&gt;
&lt;p&gt;该图应为完全图，边数为$\frac{(1+(n-1))(n-1)}{2} = \frac{n(n-1)}{2}$&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;问题描述-2&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;在计算机存储中，12.5MB是多少字节？&lt;/p&gt;
&lt;h3 id=&#34;答案-2&#34;&gt;答案&lt;/h3&gt;
&lt;p&gt;$13107200$&lt;/p&gt;
&lt;h3 id=&#34;戏说-3&#34;&gt;戏说&lt;/h3&gt;
&lt;p&gt;$1\text{MB}=1024\text{KB}=1024*1024\text{B}$&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;问题描述-3&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;由1对括号，可以组成一种合法括号序列：()。
由2对括号，可以组成两种合法括号序列：()()、(())。
由4对括号组成的合法括号序列一共有多少种？&lt;/p&gt;
&lt;h3 id=&#34;答案-3&#34;&gt;答案&lt;/h3&gt;
&lt;p&gt;$14$&lt;/p&gt;
&lt;h3 id=&#34;改编-1&#34;&gt;改编&lt;/h3&gt;
&lt;p&gt;由$n$对括号组成的合法括号序列一共有多少种？&lt;/p&gt;
&lt;h4 id=&#34;戏说-4&#34;&gt;戏说&lt;/h4&gt;
&lt;p&gt;这题作为填空题肯定是手动枚举一下就行了。&lt;/p&gt;
&lt;p&gt;这里深度为1的序列有一种为：&lt;code&gt;()()()()&lt;/code&gt;，深度为2的有7种:&lt;code&gt;(())()()&lt;/code&gt;、&lt;code&gt;()(())()&lt;/code&gt;、&lt;code&gt;()()(())&lt;/code&gt;、&lt;code&gt;(()()())&lt;/code&gt;、&lt;code&gt;(()())()&lt;/code&gt;、&lt;code&gt;()(()())&lt;/code&gt;、&lt;code&gt;(())(())&lt;/code&gt;，深度为3的有5种：&lt;code&gt;((()))()&lt;/code&gt;、&lt;code&gt;()((()))&lt;/code&gt;、&lt;code&gt;((())())&lt;/code&gt;、&lt;code&gt;(()(()))&lt;/code&gt;、&lt;code&gt;((()()))&lt;/code&gt;，深度为4的有1种:&lt;code&gt;(((())))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我知道你一定觉得这中间有什么规律，但是一时半会儿想不出来。注意，规律不是$2^{n-1}$，我一开始枚举漏了，差点写成8。&lt;/p&gt;
&lt;p&gt;实际上，这是一个卡特兰$Catalan$数问题。&lt;/p&gt;
&lt;p&gt;这里直接给出卡特兰数的定义，即卡特兰数&lt;/p&gt;
&lt;p&gt;$Catalan(n+1)=Catalan(0)*Catalan(n)+Catalan(1)*Catalan(n-1)+&amp;hellip;+Catalan(n)*Catalan(0)$&lt;/p&gt;
&lt;p&gt;其中，$Catalan(0)=1$&lt;/p&gt;
&lt;p&gt;带入一下是不是可以算出：&lt;/p&gt;
&lt;p&gt;$Catalan(1)=1$&lt;/p&gt;
&lt;p&gt;$Catalan(2)=2$&lt;/p&gt;
&lt;p&gt;$Catalan(3)=5$&lt;/p&gt;
&lt;p&gt;$Catalan(4)=14$&lt;/p&gt;
&lt;p&gt;这里便可以用来解决一部分问题了，但这种递推的求法对于$n$较大的情况还是很难处理，即使交给计算机，也容易超时，是否有更好的解法呢？我们可以尝试推一推卡特兰数的通项公式，以这个问题为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;考虑$n$对括号，共有$n$个&lt;code&gt;(&lt;/code&gt;和$n$个&lt;code&gt;)&lt;/code&gt;。显然其全排列的个数为$2n\choose n$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;考虑减法原理，计算非法个数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;观察非法排列的特性，我们假设&lt;code&gt;(&lt;/code&gt;为$1$，&lt;code&gt;)&lt;/code&gt;为$-1$，那么对于任意一个非法排列$a_1,a_2,&amp;hellip;,a_n$ ，一定存在一个$k$,使得$a_1+a_2+&amp;hellip;+a_k&amp;lt;0$，即$1\sim k$中，&lt;code&gt;)&lt;/code&gt;个数比&lt;code&gt;(&lt;/code&gt;个数多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;考虑一个$n=3$时具体的排列$1,-1,1,-1-1,1$，在$k=5$时，出现了非法情况。我们将$1\sim 5$的每个元素元素翻转，那么该序列就变成了$-1,1,-1,1,1,1$&lt;/p&gt;
&lt;p&gt;翻转过后，一共有$n+1$个$1$，$n-1$个$-1$，共有$2n\choose n+1$种。&lt;/p&gt;
&lt;p&gt;也就是说，对于一个含$n$个$1$，$n$个$-1$的非法排列，总是存在一个最小的$k$，使得我们对第$1$个到第$k$个元素翻转，就能变成含$n+1$个$1$，$n-1$个$-1$的非法排列。同样，对于含$n+1$个$1$，$n-1$个$-1$的非法排列，也总是存在一个最小的$pos$，使得我们对第$1$个到第$pos$个元素翻转，就能变成含$n$个$1$，$n$个$-1$的非法排列。比如对于非法排列$-1,1,1,1,1,-1$，存在$pos=3$，使得翻转后序列变为$1,-1,-1,1,1,-1$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这意味着所有的含$n+1$个$1$，$n-1$个$-1$的非法排列和含$n$个$1$，$n$个$-1$的非法排列建立了一一对应的关系，所以可以推得，非法排列的个数为$2n\choose n+1$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;那么对于$n$对括号，合法的排列共有${2n\choose n} - {2n\choose n+1}=\frac{(2n)!}{(n+1)!n!}=\frac{2n\choose n}{n+1}$种&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而卡特兰数的通项公式正好对应上述结果，即$Catalan(n)=\frac{2n\choose n}{n+1}$&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;del&gt;改编不是乱编，戏说不是胡说。&lt;/del&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;程序设计题&#34;&gt;程序设计题&lt;/h2&gt;
&lt;h3 id=&#34;凯撒密码&#34;&gt;凯撒密码&lt;/h3&gt;
&lt;h4 id=&#34;问题描述-4&#34;&gt;问题描述&lt;/h4&gt;
&lt;p&gt;给定一个单词，请使用凯撒密码将这个单词加密。&lt;/p&gt;
&lt;p&gt;凯撒密码是一种替换加密的技术，单词中的所有字母都在字母表上向后偏移3位后被替换成密文。即a变为d，b变为e，&amp;hellip;，w变为z，x变为a，y变为b，z变为c。&lt;/p&gt;
&lt;p&gt;例如，lanqiao会变成odqtldr。&lt;/p&gt;
&lt;h4 id=&#34;输入格式&#34;&gt;输入格式&lt;/h4&gt;
&lt;p&gt;输入一行，包含一个单词，单词中只包含小写英文字母。&lt;/p&gt;
&lt;h4 id=&#34;输出格式&#34;&gt;输出格式&lt;/h4&gt;
&lt;p&gt;输出一行，表示加密后的密文。&lt;/p&gt;
&lt;h4 id=&#34;样例输入&#34;&gt;样例输入&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;lanqiao&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;样例输出&#34;&gt;样例输出&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;odqtldr&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;评测用例规模与约定&#34;&gt;评测用例规模与约定&lt;/h4&gt;
&lt;p&gt;对于所有评测用例，单词中的字母个数不超过100。&lt;/p&gt;
&lt;h3 id=&#34;思路与代码&#34;&gt;思路与代码&lt;/h3&gt;
&lt;p&gt;利用ASCII值进行变换，注意处理x,y,z，直接给出代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
  * @Project lanqiao_provincial_simulation
  * @Filename 5
  * @Author Visors
  * @Date 2020/4/25 8:48
  * @Version 1.0
  * @Description 凯撒密码
  **/

#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;

using namespace std;
string s;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin &amp;gt;&amp;gt; s;
    int len = s.length();
    for (int i = 0; i &amp;lt; len; i++) s[i] = (s[i] + 3 - &#39;a&#39;) % 26 + &#39;a&#39;;
    cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不用写很多if，一个公式就可以解决了。&lt;/p&gt;
&lt;p&gt;本题的一个好的测试方法是，输入&lt;code&gt;abcdefghijklmnopqrstuvwxyz&lt;/code&gt;，看看结果是否为&lt;code&gt;defghijklmnopqrstuvwxyzabc&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;反倍数&#34;&gt;反倍数&lt;/h3&gt;
&lt;h4 id=&#34;问题描述-5&#34;&gt;问题描述&lt;/h4&gt;
&lt;p&gt;给定三个整数 a, b, c，如果一个整数既不是 a 的整数倍也不是 b 的整数倍还不是 c 的整数倍，则这个数称为反倍数。&lt;/p&gt;
&lt;p&gt;请问在 1 至 n 中有多少个反倍数。&lt;/p&gt;
&lt;h4 id=&#34;输入格式-1&#34;&gt;输入格式&lt;/h4&gt;
&lt;p&gt;输入的第一行包含一个整数 n。&lt;/p&gt;
&lt;p&gt;第二行包含三个整数 a, b, c，相邻两个数之间用一个空格分隔。&lt;/p&gt;
&lt;h4 id=&#34;输出格式-1&#34;&gt;输出格式&lt;/h4&gt;
&lt;p&gt;输出一行包含一个整数，表示答案。&lt;/p&gt;
&lt;h4 id=&#34;样例输入-1&#34;&gt;样例输入&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;30
2 3 6
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;样例输出-1&#34;&gt;样例输出&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;10&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;样例说明&#34;&gt;样例说明&lt;/h4&gt;
&lt;p&gt;以下这些数满足要求：1, 5, 7, 11, 13, 17, 19, 23, 25, 29。&lt;/p&gt;
&lt;h4 id=&#34;评测用例规模与约定-1&#34;&gt;评测用例规模与约定&lt;/h4&gt;
&lt;p&gt;对于 40% 的评测用例，1 &amp;lt;= n &amp;lt;= 10000。&lt;/p&gt;
&lt;p&gt;对于 80% 的评测用例，1 &amp;lt;= n &amp;lt;= 100000。&lt;/p&gt;
&lt;p&gt;对于所有评测用例，1 &amp;lt;= n &amp;lt;= 1000000，1 &amp;lt;= a &amp;lt;= n，1 &amp;lt;= b &amp;lt;= n，1 &amp;lt;= c &amp;lt;= n。&lt;/p&gt;
&lt;h3 id=&#34;思路与代码-1&#34;&gt;思路与代码&lt;/h3&gt;
&lt;p&gt;就这个范围，暴力应该就可以了，不过我还是敲了个筛法。最关键的地方是，不要重复统计！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
  * @Project lanqiao_provincial_simulation
  * @Filename 6
  * @Author Visors
  * @Date 2020/4/25 8:53
  * @Version 1.0
  * @Description 反倍数
  **/

#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;algorithm&amp;gt;

using namespace std;
const int N = 1e6 + 5;
int n;
bool book[N]; //记录非反倍数

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin &amp;gt;&amp;gt; n;
    vector&amp;lt;int&amp;gt; v(3);
    for (auto &amp;amp;it:v) cin &amp;gt;&amp;gt; it;
    sort(v.begin(), v.end()); //对题目的a,b,c从小到大排序，至于为什么，见后面
    long long a, b, c; //因为要乘所以开long long，不然如果题目给个1和1000000
    // 我的程序就会1000000*1000000导致int溢出
    int tot = 0; //统计非反倍数个数
    for (int i = 1; i &amp;lt;= n; i++) { //枚举倍数
        a = v[0] * i;
        b = v[1] * i;
        c = v[2] * i;
        //cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &#39; &#39; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &#39; &#39; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; endl;
        if (a &amp;gt; n) break; //最小数的倍数都比n大，其它数肯定也大，直接结束
        if (a &amp;lt;= n &amp;amp;&amp;amp; !book[a]) { //a*i没超界且该数没被记录过（去重）
            book[a] = true; //记录
            tot++; //非反倍数+1
        }
        if (b &amp;lt;= n &amp;amp;&amp;amp; !book[b]) {
            book[b] = true;
            tot++;
        }
        if (c &amp;lt;= n &amp;amp;&amp;amp; !book[c]) {
            book[c] = true;
            tot++;
        }
    }
    cout &amp;lt;&amp;lt; n - tot &amp;lt;&amp;lt; endl; //总个数-非反倍数个数=反倍数个数
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有点小题大做不是……&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;螺旋矩阵&#34;&gt;螺旋矩阵&lt;/h3&gt;
&lt;h4 id=&#34;问题描述-6&#34;&gt;问题描述&lt;/h4&gt;
&lt;p&gt;对于一个 n 行 m 列的表格，我们可以使用螺旋的方式给表格依次填上正整数，我们称填好的表格为一个螺旋矩阵。&lt;/p&gt;
&lt;p&gt;例如，一个 4 行 5 列的螺旋矩阵如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1  2  3  4  5
14 15 16 17 6
13 20 19 18 7
12 11 10 9  8
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;输入格式-2&#34;&gt;输入格式&lt;/h4&gt;
&lt;p&gt;输入的第一行包含两个整数 n, m，分别表示螺旋矩阵的行数和列数。&lt;/p&gt;
&lt;p&gt;第二行包含两个整数 r, c，表示要求的行号和列号。&lt;/p&gt;
&lt;h4 id=&#34;输出格式-2&#34;&gt;输出格式&lt;/h4&gt;
&lt;p&gt;输出一个整数，表示螺旋矩阵中第 r 行第 c 列的元素的值。&lt;/p&gt;
&lt;h4 id=&#34;样例输入-2&#34;&gt;样例输入&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;4 5
2 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;样例输出-2&#34;&gt;样例输出&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;15&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;评测用例规模与约定-2&#34;&gt;评测用例规模与约定&lt;/h4&gt;
&lt;p&gt;对于 30% 的评测用例，2 &amp;lt;= n, m &amp;lt;= 20。&lt;/p&gt;
&lt;p&gt;对于 70% 的评测用例，2 &amp;lt;= n, m &amp;lt;= 100。&lt;/p&gt;
&lt;p&gt;对于所有评测用例，2 &amp;lt;= n, m &amp;lt;= 1000，1 &amp;lt;= r &amp;lt;= n，1 &amp;lt;= c &amp;lt;= m。&lt;/p&gt;
&lt;h3 id=&#34;思路与代码-2&#34;&gt;思路与代码&lt;/h3&gt;
&lt;p&gt;这题数据范围太小，四个while暴力一个一个填数，填到$r$行$c$列即可，下面是随便找的代码（网上博客里面填蛇形矩阵的，如果没记错估计是copy的紫书的）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;tot = a[x = 0][y = 0] = 1;
while (tot&amp;lt;n*m)
{
	while (y + 1&amp;lt;n&amp;amp;&amp;amp;!a[x][y + 1])a[x][++y] = ++tot;
	while (x + 1&amp;lt;m&amp;amp;&amp;amp;!a[x + 1][y])a[++x][y] = ++tot;
	while (y - 1 &amp;gt;= 0 &amp;amp;&amp;amp; !a[x][y - 1])a[x][--y] = ++tot;
	while (x - 1 &amp;gt;= 0 &amp;amp;&amp;amp; !a[x - 1][y])a[--x][y] = ++tot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里只放了核心代码，对于初学者来说可能不太容易懂。我初接触算法竞赛时，看到紫书上这个代码，也有点迷糊（刘汝佳代码都比较精炼）。如果不懂，建议纸上跟着画一画，或者在Excel里面填着看。&lt;/p&gt;
&lt;p&gt;不过我还是得整点活，上述代码时间复杂度肯定是$O(nm)$，数据范围再大点呢？显然容易超时。有没有公式可以让我们快速求解呢？&lt;/p&gt;
&lt;p&gt;若用$rect[i][j]$表示螺旋矩阵$i$行$j$列的数字，那么对于$n$行$m$列的螺旋矩阵的最外圈，我们可以发现其遵循下面公式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$rect[1][j]=j$&lt;/li&gt;
&lt;li&gt;$rect[i][m]=m+i-1$&lt;/li&gt;
&lt;li&gt;$rect[n][j]=n+2*m-2-j+1$&lt;/li&gt;
&lt;li&gt;$rect[i][1]=2*(n+m)-4-i+2$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这只是最外圈的公式，还要不要继续推下去呢？再推太麻烦了，其实一个矩阵可以被拆成$(n+1)/2$个外圈，分治即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
  * @Project lanqiao_provincial_simulation
  * @Filename 7
  * @Author Visors
  * @Date 2020/4/25 9:14
  * @Version 1.0
  * @Description 螺旋矩阵
  **/

#include &amp;lt;iostream&amp;gt;

using namespace std;

int n, m, r, c;

int calc(int row, int col, int i, int j) {
    //如果在当前矩阵最外圈，直接公式求解
    if (i == 1)
        return j;
    if (j == col)
        return col + i - 1;
    if (i == row)
        return row + 2 * col - 2 - j + 1;
    if (j == 1)
        return 2 * (row + col) - 4 - i + 2;
    //带着数字进入子矩阵求解
    return calc(row - 2, col - 2, i - 1, j - 1) + 2 * (row + col) - 4;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; r &amp;gt;&amp;gt; c;
    cout &amp;lt;&amp;lt; calc(n, m, r, c) &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;摆动序列&#34;&gt;摆动序列&lt;/h3&gt;
&lt;h4 id=&#34;问题描述-7&#34;&gt;问题描述&lt;/h4&gt;
&lt;p&gt;如果一个序列的奇数项都比前一项大，偶数项都比前一项小，则称为一个摆动序列。即 a[2i]&amp;lt;a[2i-1], a[2i+1]&amp;gt;a[2i]。&lt;/p&gt;
&lt;p&gt;小明想知道，长度为 m，每个数都是 1 到 n 之间的正整数的摆动序列一共有多少个。&lt;/p&gt;
&lt;h4 id=&#34;输入格式-3&#34;&gt;输入格式&lt;/h4&gt;
&lt;p&gt;输入一行包含两个整数 m，n。&lt;/p&gt;
&lt;h4 id=&#34;输出格式-3&#34;&gt;输出格式&lt;/h4&gt;
&lt;p&gt;输出一个整数，表示答案。答案可能很大，请输出答案除以10000的余数。&lt;/p&gt;
&lt;h4 id=&#34;样例输入-3&#34;&gt;样例输入&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;3 4&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;样例输出-3&#34;&gt;样例输出&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;14&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;样例说明-1&#34;&gt;样例说明&lt;/h4&gt;
&lt;p&gt;以下是符合要求的摆动序列：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2 1 2
2 1 3
2 1 4
3 1 2
3 1 3
3 1 4
3 2 3
3 2 4
4 1 2
4 1 3
4 1 4
4 2 3
4 2 4
4 3 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;评测用例规模与约定-3&#34;&gt;评测用例规模与约定&lt;/h4&gt;
&lt;p&gt;对于 20% 的评测用例，1 &amp;lt;= n, m &amp;lt;= 5；&lt;/p&gt;
&lt;p&gt;对于 50% 的评测用例，1 &amp;lt;= n, m &amp;lt;= 10；&lt;/p&gt;
&lt;p&gt;对于 80% 的评测用例，1 &amp;lt;= n, m &amp;lt;= 100；&lt;/p&gt;
&lt;p&gt;对于所有评测用例，1 &amp;lt;= n, m &amp;lt;= 1000。&lt;/p&gt;
&lt;h3 id=&#34;思路与代码-3&#34;&gt;思路与代码&lt;/h3&gt;
&lt;p&gt;这题很多人都说是DP，其实也算不上是DP吧，因为递推就可以了，没有什么“决策”可言。&lt;/p&gt;
&lt;p&gt;若令$f[m][n]$为长度为$m$，以$n$结尾的方案数，那么有&lt;/p&gt;
&lt;p&gt;$f[i][j]=\sum{f[i-1][t]},(t&amp;lt;j)$&lt;/p&gt;
&lt;p&gt;对这个式子不理解？看下后面的代码应该就明白了。&lt;/p&gt;
&lt;p&gt;很明显我们需要枚举$i$和$j$，并且还要计算$\sum$值，这样做的时间复杂度是$O(mn^2)$，显然超出的范围限制（终于？？）。但无需惊慌，对于连续求和，我们可以用前缀和优化一下，时间复杂度即降到$O(mn)$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
  * @Project lanqiao_provincial_simulation
  * @Filename 8
  * @Author Visors
  * @Date 2020/4/25 9:27
  * @Version 1.0
  * @Description 摆动序列
  **/

#include&amp;lt;iostream&amp;gt;

using namespace std;
const int N = 1000 + 5, MOD = 10000;
int m, n, ans = 0;
int f[N][N]; //f[i][j]为长度为i，以j结尾的方案数

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; n;
    for (int i = 1; i &amp;lt;= n; i++) f[1][i] = 1; //长度为1，以谁结尾都是一种方案，递推起点
    for (int i = 2; i &amp;lt;= m; i++) {
        int sum = 0;
        if (i &amp;amp; 1) { //奇数与1得1
            //奇数项，从前开始
            for (int j = 1; j &amp;lt;= n; j++) {
                //前缀和优化
                f[i][j] += sum;
                f[i][j] %= MOD;
                sum += f[i - 1][j];
                sum %= MOD;
            }
        } else {
            //偶数项，从后开始
            for (int j = n; j &amp;gt;= 1; j--) {
                //前缀和优化
                f[i][j] += sum;
                f[i][j] %= MOD;
                sum += f[i - 1][j];
                sum %= MOD;
            }
        }
    }
    for (int i = 1; i &amp;lt;= n; i++) {
        ans += f[m][i];
        ans %= MOD;
    }
    cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这题是NOIP2013花匠的弱化版，有兴趣可以深入了解一下。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;户户通电&#34;&gt;户户通电&lt;/h3&gt;
&lt;h4 id=&#34;问题描述-8&#34;&gt;问题描述&lt;/h4&gt;
&lt;p&gt;2015年，全中国实现了户户通电。作为一名电力建设者，小明正在帮助一带一路上的国家通电。&lt;/p&gt;
&lt;p&gt;这一次，小明要帮助 n 个村庄通电，其中 1 号村庄正好可以建立一个发电站，所发的电足够所有村庄使用。&lt;/p&gt;
&lt;p&gt;现在，这 n 个村庄之间都没有电线相连，小明主要要做的是架设电线连接这些村庄，使得所有村庄都直接或间接的与发电站相通。&lt;/p&gt;
&lt;p&gt;小明测量了所有村庄的位置（坐标）和高度，如果要连接两个村庄，小明需要花费两个村庄之间的坐标距离加上高度差的平方，形式化描述为坐标为 (x_1, y_1) 高度为 h_1 的村庄与坐标为 (x_2, y_2) 高度为 h_2 的村庄之间连接的费用为&lt;/p&gt;
&lt;p&gt;$$\sqrt{(x_1-x_2)^2+(y_1-y_2)^2+(h_1-h_2)^2}$$&lt;/p&gt;
&lt;p&gt;在上式中 sqrt 表示取括号内的平方根。请注意括号的位置，高度的计算方式与横纵坐标的计算方式不同。&lt;/p&gt;
&lt;p&gt;由于经费有限，请帮助小明计算他至少要花费多少费用才能使这 n 个村庄都通电。&lt;/p&gt;
&lt;h4 id=&#34;输入格式-4&#34;&gt;输入格式&lt;/h4&gt;
&lt;p&gt;输入的第一行包含一个整数 n ，表示村庄的数量。&lt;/p&gt;
&lt;p&gt;接下来 n 行，每个三个整数 x, y, h，分别表示一个村庄的横、纵坐标和高度，其中第一个村庄可以建立发电站。&lt;/p&gt;
&lt;h4 id=&#34;输出格式-4&#34;&gt;输出格式&lt;/h4&gt;
&lt;p&gt;输出一行，包含一个实数，四舍五入保留 2 位小数，表示答案。&lt;/p&gt;
&lt;h4 id=&#34;样例输入-4&#34;&gt;样例输入&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;4
1 1 3
9 9 7
8 8 6
4 5 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;样例输出-4&#34;&gt;样例输出&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;17.41&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;评测用例规模与约定-4&#34;&gt;评测用例规模与约定&lt;/h4&gt;
&lt;p&gt;对于 30% 的评测用例，1 &amp;lt;= n &amp;lt;= 10；&lt;/p&gt;
&lt;p&gt;对于 60% 的评测用例，1 &amp;lt;= n &amp;lt;= 100；&lt;/p&gt;
&lt;p&gt;对于所有评测用例，1 &amp;lt;= n &amp;lt;= 1000，0 &amp;lt;= x, y, h &amp;lt;= 10000。&lt;/p&gt;
&lt;h3 id=&#34;思路与代码-4&#34;&gt;思路与代码&lt;/h3&gt;
&lt;p&gt;吐槽：这是什么&lt;del&gt;魔怔&lt;/del&gt;距离计算公式？&lt;/p&gt;
&lt;p&gt;不过好在题目“好心”提示了一下，所以问题不大。&lt;/p&gt;
&lt;p&gt;读完题目，发现这是一道最小生成树板子题目。你只需，根据&lt;del&gt;魔怔&lt;/del&gt;距离公式建出完全图，然后套上最小生成树算法得板子即可。值得注意的是，由于本题是完全图，总共有$\frac{n(n-1)}{2}$条边，属于稠密图&lt;del&gt;确信&lt;/del&gt;，由于$prim$算法在稠密图上表现由于$Kruskal$算法，所以我们采用堆优化得$prim$算法（如果不知道为啥要堆优化，可以查阅一下相关资料，这两个算法应该是离散数学里面讲过的）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
  * @Project lanqiao_provincial_simulation
  * @Filename 9
  * @Author Visors
  * @Date 2020/4/25 9:47
  * @Version 1.0
  * @Description 户户通电
  **/

#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cmath&amp;gt;
#include &amp;lt;queue&amp;gt;

using namespace std;
const int N = 1000 + 5;
const double oo = sqrt(10000 * 10000 + 10000 * 10000) + 10000 * 10000 + 5;
int n;
double G[N][N], lowCost[N];
bool book[N];

struct Node {
    double x, y, h;

    Node() : x(0), y(0), h(0) {}

    Node(double x, double y, double h) : x(x), y(y), h(h) {}
} node[N];

struct Elem {
    int num;
    double dist;

    Elem() {}

    Elem(int num, double dist) : num(num), dist(dist) {}

    //重载&amp;lt;使优先队列为最小堆
    bool operator&amp;lt;(const Elem &amp;amp;x) const {
        return dist &amp;gt; x.dist;
    }
};

priority_queue&amp;lt;Elem&amp;gt; pq;

double prim() {
    //初始化
    for (int i = 1; i &amp;lt;= n; i++) {
        lowCost[i] = G[1][i];
        pq.push(Elem(i,lowCost[i]));
    }
    lowCost[1] = -oo;
    double tot = 0.0;
    int count = 1;
    Elem tmp;
    while (1) {
        if (count == n) break;
        //取有效堆顶，即为最近顶点
        while (!pq.empty()) {
            tmp = pq.top();
            pq.pop();
            if (lowCost[tmp.num] != -oo) break;
        }
        tot += tmp.dist;
        lowCost[tmp.num] = -oo;
        for (int i = 1; i &amp;lt;= n; i++) {
            if (lowCost[i] != -oo &amp;amp;&amp;amp; G[tmp.num][i] &amp;lt; lowCost[i]) {
                lowCost[i] = G[tmp.num][i];
                pq.push(Elem(i,lowCost[i]));
            }
        }
        count++;
    }
    return tot;
}

int main() {
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);
    double x, y, h;
    for (int i = 1; i &amp;lt;= n; i++) {
        scanf(&amp;quot;%lf%lf%lf&amp;quot;, &amp;amp;x, &amp;amp;y, &amp;amp;h);
        node[i] = Node(x, y, h);
    }
    //建图
    for (int i = 1; i &amp;lt;= n; i++)
        for (int j = 1; j &amp;lt;= i; j++) {
            if (i == j) G[i][j] = 0;
            else {
                x = (node[i].x - node[j].x) * (node[i].x - node[j].x);
                y = (node[i].y - node[j].y) * (node[i].y - node[j].y);
                h = (node[i].h - node[j].h) * (node[i].h - node[j].h);
                G[i][j] = G[j][i] = sqrt(x + y) + h;
            }
        }
    printf(&amp;quot;%.2lf\n&amp;quot;,prim());
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为这是我临场拼的板子，所以可能写的有点过长。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;郊外植树&#34;&gt;郊外植树&lt;/h3&gt;
&lt;h4 id=&#34;问题描述-9&#34;&gt;问题描述&lt;/h4&gt;
&lt;p&gt;小明和朋友们一起去郊外植树，他们带了一些在自己实验室精心研究出的小树苗。&lt;/p&gt;
&lt;p&gt;小明和朋友们一共有 n 个人，他们经过精心挑选，在一块空地上每个人挑选了一个适合植树的位置，总共 n 个。他们准备把自己带的树苗都植下去。&lt;/p&gt;
&lt;p&gt;然而，他们遇到了一个困难：有的树苗比较大，而有的位置挨太近，导致两棵树植下去后会撞在一起。&lt;/p&gt;
&lt;p&gt;他们将树看成一个圆，圆心在他们找的位置上。如果两棵树对应的圆相交，这两棵树就不适合同时植下（相切不受影响），称为两棵树冲突。&lt;/p&gt;
&lt;p&gt;小明和朋友们决定先合计合计，只将其中的一部分树植下去，保证没有互相冲突的树。他们同时希望这些树所能覆盖的面积和（圆面积和）最大。&lt;/p&gt;
&lt;h4 id=&#34;输入格式-5&#34;&gt;输入格式&lt;/h4&gt;
&lt;p&gt;输入的第一行包含一个整数 n ，表示人数，即准备植树的位置数。&lt;/p&gt;
&lt;p&gt;接下来 n 行，每行三个整数 x, y, r，表示一棵树在空地上的横、纵坐标和半径。&lt;/p&gt;
&lt;h4 id=&#34;输出格式-5&#34;&gt;输出格式&lt;/h4&gt;
&lt;p&gt;输出一行包含一个整数，表示在不冲突下可以植树的面积和。由于每棵树的面积都是圆周率的整数倍，请输出答案除以圆周率后的值（应当是一个整数）。&lt;/p&gt;
&lt;h4 id=&#34;样例输入-5&#34;&gt;样例输入&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;6
1 1 2
1 4 2
1 7 2
4 1 2
4 4 2
4 7 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;样例输出-5&#34;&gt;样例输出&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;12&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;评测用例规模与约定-5&#34;&gt;评测用例规模与约定&lt;/h4&gt;
&lt;p&gt;对于 30% 的评测用例，1 &amp;lt;= n &amp;lt;= 10；&lt;/p&gt;
&lt;p&gt;对于 60% 的评测用例，1 &amp;lt;= n &amp;lt;= 20；&lt;/p&gt;
&lt;p&gt;对于所有评测用例，1 &amp;lt;= n &amp;lt;= 30，0 &amp;lt;= x, y &amp;lt;= 1000，1 &amp;lt;= r &amp;lt;= 1000。&lt;/p&gt;
&lt;h3 id=&#34;思路与代码-5&#34;&gt;思路与代码&lt;/h3&gt;
&lt;p&gt;如何判断两棵树是否干涉，其实就是利用高中学过的圆与圆间位置关系来判断即可，也就是两圆心（种树的位置）间距离小于两圆半径之和即为相交。&lt;/p&gt;
&lt;p&gt;这题树很少，直接暴力即可，但纯暴力还是有点吃紧，我们可以稍作剪枝。前面已经说了判断两棵树是否干涉的方法，我们可以考虑预处理任意两树是否发生干涉的数组，在搜索时，一旦出现干涉，立刻返回，即采用可行性剪枝（听说也叫左剪枝，这是根据搜索树形态的变化命名的）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/**
  * @Project lanqiao_provincial_simulation
  * @Filename 10
  * @Author Visors
  * @Date 2020/4/25 10:24
  * @Version 1.0
  * @Description 郊外植树
  **/

#include&amp;lt;iostream&amp;gt;

using namespace std;
const int N = 35;
int n, ans;
int x[N], y[N], r[N];
bool book[N], isIntersect[N][N];

void dfs(int step) {
    if (step &amp;gt; n) {
        int sum = 0;
        for (int i = 1; i &amp;lt;= n; i++)
            if (book[i]) sum += (r[i] * r[i]); //PI*r*r/PI
        ans = max(sum, ans);
        return;
    }
    book[step] = false;
    dfs(step + 1); //不种该树搜
    for (int i = 1; i &amp;lt; step; i++)
        if (book[i] &amp;amp;&amp;amp; isIntersect[i][step]) return; //可行性剪枝
    book[step] = true;
    dfs(step + 1); //种该树搜
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin &amp;gt;&amp;gt; n;
    for (int i = 1; i &amp;lt;= n; i++) cin &amp;gt;&amp;gt; x[i] &amp;gt;&amp;gt; y[i] &amp;gt;&amp;gt; r[i];
    //判断圆与圆间位置关系
    for (int i = 1; i &amp;lt;= n; i++)
        for (int j = i + 1; j &amp;lt;= n; j++)
            isIntersect[i][j] = isIntersect[j][i] = ((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]) &amp;lt;
                                                     (r[i] + r[j]) * (r[i] + r[j]));
    dfs(1);
    cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;之前以为校赛模拟赛会比较简单，省赛模拟赛会难一些，事实上好像难度接近，甚至这场难度还低于前面某场（之前看星星的题目我线下没写出满分）？所以我估计省赛时也就是这样的难度。也就是说，更多的考察一些数学基础与思维，再带上一些常用算法。&lt;/p&gt;
&lt;p&gt;由于蓝桥不能带板子，所以从练习时就要理解所有的算法，以便自己在赛场上能思路清晰的独立敲出来，背代码是吃力不讨好的。推荐备战蓝桥的同学多刷刷蓝桥题库，如果对算法题有进一步兴趣，也可以刷刷leetcode、Codeforces等网站的题目，对以后求职会有很大帮助。&lt;del&gt;也欢迎来参加我们实验室组织的各项比赛XD&lt;/del&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
