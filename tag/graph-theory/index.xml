<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graph Theory | Visors的个人主页</title>
    <link>https://visors.github.io/tag/graph-theory/</link>
      <atom:link href="https://visors.github.io/tag/graph-theory/index.xml" rel="self" type="application/rss+xml" />
    <description>Graph Theory</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>©2021 万祚全 All rights reserved</copyright><lastBuildDate>Mon, 09 Nov 2020 20:49:54 +0800</lastBuildDate>
    <image>
      <url>https://visors.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Graph Theory</title>
      <link>https://visors.github.io/tag/graph-theory/</link>
    </image>
    
    <item>
      <title>分层图思想及其处理方法</title>
      <link>https://visors.github.io/post/%E5%88%86%E5%B1%82%E5%9B%BE%E6%80%9D%E6%83%B3%E5%8F%8A%E5%85%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 09 Nov 2020 20:49:54 +0800</pubDate>
      <guid>https://visors.github.io/post/%E5%88%86%E5%B1%82%E5%9B%BE%E6%80%9D%E6%83%B3%E5%8F%8A%E5%85%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;link href=&#34;https://fonts.googleapis.com/css2?family=Noto+Serif+TC&amp;display=swap&#34; rel=&#34;stylesheet&#34;&gt;
&lt;div style=&#34;font-family:&#39;Noto Serif TC&#39;&#34;&gt;
&lt;center&gt;我知 一雙手 只要握成拳頭&lt;/center&gt;
&lt;center&gt;能捱下去&lt;/center&gt;
&lt;center&gt;哪怕我 面容極蒼白&lt;/center&gt;
&lt;center&gt;拒絕疲累&lt;/center&gt;
&lt;center&gt;追 追不到 也得追&lt;/center&gt;
&lt;center&gt;成就最渺小的壯舉&lt;/center&gt;
&lt;center&gt;一雙手 可以不求人 頑強面對&lt;/center&gt;
&lt;center&gt;這世界 絕情又刻薄 照樣無懼&lt;/center&gt;
&lt;center&gt;當 天開眼 暖風吹 雲霧會散開&lt;/center&gt;
&lt;center&gt;給我堡壘&lt;/center&gt;
&lt;p align=&#34;right&#34;&gt;&lt;i&gt;——林奕匡《壹雙手》&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;状态与图&#34;&gt;状态与图&lt;/h2&gt;
&lt;h3 id=&#34;一个小插曲&#34;&gt;一个小插曲&lt;/h3&gt;
&lt;p&gt;学习动态规划时，我们一定会接触到一个概念——状态。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tarjan求割点所割连通分量数</title>
      <link>https://visors.github.io/post/tarjan%E6%B1%82%E5%89%B2%E7%82%B9%E6%89%80%E5%89%B2%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F%E6%95%B0/</link>
      <pubDate>Sat, 31 Oct 2020 10:54:46 +0800</pubDate>
      <guid>https://visors.github.io/post/tarjan%E6%B1%82%E5%89%B2%E7%82%B9%E6%89%80%E5%89%B2%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F%E6%95%B0/</guid>
      <description>&lt;link href=&#34;https://fonts.googleapis.com/css2?family=Noto+Serif+JP:wght@500&amp;display=swap&#34; rel=&#34;stylesheet&#34;&gt;
&lt;div style=&#34;font-family:&#39;Noto Serif JP&#39;, serif&#34;&gt;
    &lt;center&gt;ただ ひたすらなその思い&lt;/center&gt;
	&lt;center&gt;孤独な闇をいつか&lt;/center&gt;
	&lt;center&gt;照らすだろう&lt;/center&gt;
    &lt;p align=&#34;right&#34; font-style&gt;&lt;i&gt;——《3びきのくま》&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Tarjan求割点的方法已经在《&lt;a href=&#34;https://visors.github.io/post/tarjan%e6%b1%82%e6%97%a0%e5%90%91%e5%9b%be%e5%89%b2%e7%82%b9/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tarjan求无向图割点&lt;/a&gt;》中介绍了，不清楚的读者可以先行阅读那部分内容，这里直接分析求割点所割连通分量数的方法。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;
&lt;p&gt;前面介绍Tarjan算法时，我们介绍了无向图的搜索树的概念。那时，我们从形状的角度感性认识了Tarjan算法的正确性，事实上，对于$low$的实际意义，我们可以更进一步地思考一下，首先回顾下$low$的求法：&lt;/p&gt;
&lt;p&gt;考虑这样的点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存在非搜索树上的边$(u,v)$的$v$点&lt;/li&gt;
&lt;li&gt;在回溯前能访问到的最早的点，即搜索树中以$u$为根的子树上的点能访问到的最早的点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;找出这些点中的最小的时间戳，即为我们能追溯到的最早节点，我们称之为&lt;strong&gt;追溯值&lt;/strong&gt;$low$。&lt;/p&gt;
&lt;p&gt;注意上述定义中，对于点$u$，在考虑第一种点时，我们只需考虑其$dfn$即可，而对于第二种点，我们需要在递归过程中考虑其子节点的$low$才行。对于该子树上一叶子$a$，显然其无子节点，若要更新其$low$，必然有非搜索树上的边$(a,b)$，使得$low[a] = dfn[b]$，否则$low[a]=dfn[a]$。继续向上考虑，若一个节点在回溯前每个点都无非搜索树上的边，则其$low = dfn$。换言之，一旦一个节点的$low\neq dfn$，则其子树上必有一点存在不在搜索树上的边。顺着这个思路往下想，由于这是一个递归过程，所以当递归回溯到$u$的邻点$v$时，$low[v]$应当为其子树中所有节点最小的$low$，亦即能追溯到的最早的点。若$low[v]\neq dfn[v]$，则一定存在某个子节点有一条连向时间戳为$low[v]$的点，那么形状准确来说应该类似下图：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A((A))
B((B))
C((C))
D((D))
E((E))
F((F))
A --- B
B === C
C --- D
D --- E
D --- F
F -.- C
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上图是一个缩略的图模型，意思指C的子树中有最早能追溯到C的点F，同时B点到C点间所有的点都仅为一条链。此时B到C上任意一点都为割点，删去其中任意一个点都将使其后搜索树上的子图成为一个新的连通子图。&lt;/p&gt;
&lt;p&gt;这里直接给出我们在删去割点的时候的判断标准：&lt;/p&gt;
&lt;p&gt;对于一个非搜索树根节点$u$，其有$k$个满足$dfn[u]\leq low[v]$的搜索树上的子节点$v$，则删去$u$后将生成$k+1$个互不连通的子图。&lt;/p&gt;
&lt;p&gt;这个道理很简单，删去割点，每个满足$dfn[u]\leq low[v]$的节点所在的子树自成一个个连通子图，$u$祖先方向的节点自成一个连通子图。&lt;/p&gt;
&lt;p&gt;换言之，每有一个满足$dfn[u]\leq low[v]$的子节点$v$，则删去$u$后会使连通子图数$+1$.为什么这些满足$dfn[u]\leq low[v]$的点对新生成互不连通子图的贡献不会重复呢？可以这么证明：&lt;/p&gt;
&lt;p&gt;若存在$u$的邻点$a$和$b$，满足$dfn[u]\leq low[a]$和$dfn[u]\leq low[b]$，可以假设$a$、$b$连通，那么删去$u$后，$a$和$b$同属一个连通子图，答案只增加1。但事实上，在上述假设情况下，当我们递归访问$a$（假设优先遍历$a$）时，就会遍历到$b$，并为其打上时间戳、求出回溯值，他们在搜索树上属于祖先和后代的关系，那么删去根$u$，显然只会产生多个互不连通的子图，但同时$b$并非$u$邻点，这与假设相悖。所以上述结论得证。&lt;/p&gt;
&lt;p&gt;但有一个特殊的情况需要注意，如果删除的$u$是整个搜索树的树根，则其没有祖先方向的节点，这样就会少一个连通子图。总结一下就是：&lt;/p&gt;
&lt;p&gt;对于点$u$：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$u$不是割点，则删去它不会增加互不连通子图的数目。&lt;/li&gt;
&lt;li&gt;$u$是割点，假设其满足$dfn[u]\leq low[v]$的邻点$v$有$k$个：
&lt;ol&gt;
&lt;li&gt;若$u$是搜索树根，则删去$u$后，互不连通子图数目增加$k-1$。&lt;/li&gt;
&lt;li&gt;若$u$不是搜索树根，则删去$u$后，互不连通子图数目增加$k$。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考实现&#34;&gt;参考实现&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//
// Created by Visors on 2020/10/25.
//
// 题目名：Router Mesh
// 题目来源：2020ICPC·小米 网络选拔赛第一场
// 题目链接：https://ac.nowcoder.com/acm/contest/7501/D
// 算法：Tarjan
// 用途：求割点所割连通分量数
// 时间复杂度：O(n+m)
//

#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int block = 0;

struct Tarjan {
    struct Edge {
        int to, next;

        Edge() = default;

        Edge(int to, int next) : to(to), next(next) {}
    };

    int vertexNum{}, edgeNum{};
    int cnt{};              // 当前时间戳
    int root{};             // 保存当前搜索树根
    vector&amp;lt;Edge&amp;gt; edges;
    vector&amp;lt;int&amp;gt; heads;
    vector&amp;lt;int&amp;gt; dfn;        // 时间戳
    vector&amp;lt;int&amp;gt; low;        // 最早追溯时间
    vector&amp;lt;bool&amp;gt; isCut;     // 割点
    vector&amp;lt;int&amp;gt; branches;   // 分支数

    void init(int n, int m) {
        cnt = 0;
        vertexNum = n;
        edgeNum = m;
        heads.resize(vertexNum);
        fill(heads.begin(), heads.end(), -1);
        dfn.resize(vertexNum);
        low.resize(vertexNum);
        isCut.resize(vertexNum);
        branches.resize(vertexNum);
    }

    void addEdge(int u, int v) {
        edges.emplace_back(v, heads[u]);
        heads[u] = edges.size() - 1;
    }

    void dfs(int u) {
        dfn[u] = low[u] = ++cnt;
        int tot = 0;
        for (int i = heads[u]; ~i; i = edges[i].next) {
            int &amp;amp;v = edges[i].to;
            if (!dfn[v]) {
                dfs(v);
                low[u] = min(low[u], low[v]);
                if (low[v] &amp;gt;= dfn[u]) {
                    tot++;
                    if (u != root || tot &amp;gt; 1) isCut[u] = true;   // 对树根特判
                }
            } else low[u] = min(low[u], dfn[v]);
        }
        if (u != root) tot++;
        branches[u] = tot;
    }

    void run() {
        for (int i = 0; i &amp;lt; vertexNum; i++)
            if (!dfn[i]) {
                root = i;
                block++;
                dfs(i);
            }
    }
} tarjan;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    int n, m;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    tarjan.init(n, m);
    for (int i = 1, u, v; i &amp;lt;= m; i++) {
        cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v;
        u--, v--;
        tarjan.addEdge(u, v);
        tarjan.addEdge(v, u);
    }
    tarjan.run();
    cout &amp;lt;&amp;lt; block + tarjan.branches[0] - 1;
    for (int i = 1; i &amp;lt; n; i++)
        cout &amp;lt;&amp;lt; &#39; &#39; &amp;lt;&amp;lt; block + tarjan.branches[i] - 1;
    cout &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;比赛的时候不知道从哪看的找值不同的$low$数目是真的煞笔，然后煞笔的我就真的按这个思路交了十发，全WA。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tarjan求无向图割点</title>
      <link>https://visors.github.io/post/tarjan%E6%B1%82%E6%97%A0%E5%90%91%E5%9B%BE%E5%89%B2%E7%82%B9/</link>
      <pubDate>Thu, 29 Oct 2020 10:28:18 +0800</pubDate>
      <guid>https://visors.github.io/post/tarjan%E6%B1%82%E6%97%A0%E5%90%91%E5%9B%BE%E5%89%B2%E7%82%B9/</guid>
      <description>&lt;link href=&#34;https://fonts.googleapis.com/css2?family=Noto+Serif+JP:wght@500&amp;display=swap&#34; rel=&#34;stylesheet&#34;&gt;
&lt;div style=&#34;font-family:&#39;Noto Serif JP&#39;, serif&#34;&gt;&lt;center&gt;さざ波のラインダンス 時間だけこわれてく&lt;/center&gt;
	&lt;center&gt;まなざしのボルテージ 熱くしながら&lt;/center&gt;
	&lt;center&gt;君に胸キュン 夏の印画紙&lt;/center&gt;
	&lt;center&gt;太陽だけ焼きつけて&lt;/center&gt;
	&lt;center&gt;君に胸キュン ぼくはと言えば&lt;/center&gt;
	&lt;center&gt;柄にもなくプラトニック&lt;/center&gt;
	&lt;center&gt;心の距離を計る 罪つくりな潮風&lt;/center&gt;
   	&lt;center&gt;眼を伏せた一瞬の せつなさがいい&lt;/center&gt;
    &lt;p align=&#34;right&#34; font-style&gt;&lt;i&gt;——YMO《君に、胸キュン。-浮気なヴァカンス-》&lt;/i&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Tarjan算法的核心思想已经在《&lt;a href=&#34;https://visors.github.io/post/tarjan%e6%b1%82%e6%97%a0%e5%90%91%e5%9b%be%e5%89%b2%e8%be%b9/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tarjan求无向图割边&lt;/a&gt;》中介绍了，不清楚的读者可以先行阅读那部分内容，这里直接从介绍割点开始。&lt;/p&gt;
&lt;h2 id=&#34;无向图的割点及判定&#34;&gt;无向图的割点及判定&lt;/h2&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;对于无向连通图$G(V,E)$，若删去点$v\in V$及其邻边$\forall u\in {V-v}, (v,u)\in E$后，$G$被分为两个或更多互不连通的子图，则称$v$为&lt;strong&gt;割点&lt;/strong&gt;或&lt;strong&gt;割顶&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;根据上面$dfn$和$low$，很容易能想出割边的方法——无向边$(u,v)$是割边，当且仅当搜索树上存在$u$的一个子节点$v$，满足：&lt;/p&gt;
&lt;p&gt;$$dfn[u]\leq low[v]$$&lt;/p&gt;
&lt;p&gt;如果不明白上式，可以参考之前文章中抽象的三种图形。当$dfn[u]=low[v]$时，两条链合起来状似闭环，此时无割边，但两条链$dfn$最小的咬合点显然是割点。&lt;/p&gt;
&lt;p&gt;特别的，对于我们搜索的起点，上述判定方法还需限定条件，先来看一个反例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A((1/1))
B((2/1))
C((3/1))
D((4/1))
A === B
B === C
C === D
D --- A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上图中，有唯一满足$dfn[u]\leq low[v]$的$(1,2)$，但去掉$1$后，剩余图为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
B((2))
C((3))
D((4))
B --- C
C --- D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;并没有被分为两个或以上的互不连通子图，所以这里搜索起点$1$尽管满足上面的判别式，但并不是割点。&lt;/p&gt;
&lt;p&gt;是不是所有的搜索起点都不是割点呢？提出这个问题固然在思考，但细想却很好笑——任意点都能作为搜索起点，如果这句话成立，则任意点都不是割点。&lt;/p&gt;
&lt;h2 id=&#34;对搜索起点的处理&#34;&gt;对搜索起点的处理&lt;/h2&gt;
&lt;p&gt;如果搜索起点有两个以上的子树，则意味着在搜索树上，根结点出度为二或以上。根据树的性质，如果我们删去根节点及其邻边，则原树将裂解成子树个数个互不连通的树。若不明白，任意找几棵树观察便知。&lt;/p&gt;
&lt;p&gt;要在代码中实现上述判断，可记录从根节点出发的邻点调用的DFS次数即可，伪代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int children = 0;
for (int v: G[u]) {
    if (!vis[v]) {
        children++;
        dfs(v);
    }
}
if (children &amp;gt;= 2)  u是割点
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;对重边的处理&#34;&gt;对重边的处理&lt;/h2&gt;
&lt;p&gt;对割点问题而言，删去割点将会将所有相邻的重边删去，所以割点问题并不受重边影响。&lt;/p&gt;
&lt;h2 id=&#34;参考实现&#34;&gt;参考实现&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//
// Created by Visors on 2020/10/29.
//
// 题目名：P3388 【模板】割点（割顶）
// 题目来源：luogu
// 题目链接：https://www.luogu.com.cn/problem/P3388
// 算法：Tarjan
// 用途：无向图割点
// 时间复杂度：O(n+m)
//

#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

struct Tarjan {
    struct Edge {
        int to, next;

        Edge() = default;

        Edge(int to, int next) : to(to), next(next) {}
    };

    int vertexNum{}, edgeNum{};
    int cnt{};              // 当前时间戳
    int root{};             // 保存当前搜索树根
    vector&amp;lt;Edge&amp;gt; edges;
    vector&amp;lt;int&amp;gt; heads;
    vector&amp;lt;int&amp;gt; dfn;        // 时间戳
    vector&amp;lt;int&amp;gt; low;        // 最早追溯时间
    set&amp;lt;int&amp;gt; cuts;          // 割点编号集

    void init(int n, int m) {
        cnt = 0;
        vertexNum = n;
        edgeNum = m;
        heads.resize(vertexNum);
        fill(heads.begin(), heads.end(), -1);
        dfn.resize(vertexNum);
        low.resize(vertexNum);
        cuts.clear();
    }

    void addEdge(int u, int v) {
        edges.emplace_back(v, heads[u]);
        heads[u] = edges.size() - 1;
    }

    void dfs(int u) {
        dfn[u] = low[u] = ++cnt;
        int tot = 0;
        for (int i = heads[u]; ~i; i = edges[i].next) {
            int &amp;amp;v = edges[i].to;
            if (!dfn[v]) {
                dfs(v);
                low[u] = min(low[u], low[v]);
                if (low[v] &amp;gt;= dfn[u]) {
                    tot++;
                    if (u != root || tot &amp;gt; 1) cuts.insert(u);   // 对树根特判
                }
            } else low[u] = min(low[u], dfn[v]);
        }
    }

    void run() {
        for (int i = 0; i &amp;lt; vertexNum; i++)
            if (!dfn[i]) {
                root = i;
                dfs(i);
            }
    }
} tarjan;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    int n, m;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    tarjan.init(n, m);
    for (int i = 1, u, v; i &amp;lt;= m; i++) {
        cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v;
        if (u == v) continue;
        u--, v--;
        tarjan.addEdge(u, v);
        tarjan.addEdge(v, u);
    }
    tarjan.run();
    cout &amp;lt;&amp;lt; tarjan.cuts.size() &amp;lt;&amp;lt; endl;
    bool first = true;
    for (int it:tarjan.cuts)
        if (first) {
            cout &amp;lt;&amp;lt; it + 1;
            first = false;
        } else cout &amp;lt;&amp;lt; &#39; &#39; &amp;lt;&amp;lt; it + 1;
    cout &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tarjan求无向图割边</title>
      <link>https://visors.github.io/post/tarjan%E6%B1%82%E6%97%A0%E5%90%91%E5%9B%BE%E5%89%B2%E8%BE%B9/</link>
      <pubDate>Tue, 27 Oct 2020 19:54:43 +0800</pubDate>
      <guid>https://visors.github.io/post/tarjan%E6%B1%82%E6%97%A0%E5%90%91%E5%9B%BE%E5%89%B2%E8%BE%B9/</guid>
      <description>&lt;link href=&#34;https://fonts.googleapis.com/css2?family=Marck+Script&amp;display=swap&#34; rel=&#34;stylesheet&#34;&gt;
&lt;div style=&#34;font-family:&#39;Marck Script&#39;&#34;&gt;&lt;center&gt;There&#39;s nothing in your eyes&lt;/center&gt;
&lt;center&gt;That marks where you cried&lt;/center&gt;
&lt;center&gt;All is blank all is blind&lt;/center&gt;
&lt;center&gt;Dead inside the inner mind&lt;/center&gt;
    &lt;p align=&#34;right&#34; font-style&gt;&lt;i&gt;——YMO《Behind The Mask》&lt;/i&gt;&lt;/p&gt;&lt;/div&gt;
&lt;h2 id=&#34;tarjan算法&#34;&gt;Tarjan算法&lt;/h2&gt;
&lt;p&gt;不得不说Robert Tarjan真的是大师，发个网站大家感受一下——&lt;a href=&#34;https://dblp.dagstuhl.de/pid/t/RobertEndreTarjan.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;论文索引&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里要说的Tarjan算法用于解决无向图的连通性，学习之前，先了解两个概念。&lt;/p&gt;
&lt;h3 id=&#34;无向连通图的搜索树&#34;&gt;无向连通图的搜索树&lt;/h3&gt;
&lt;p&gt;当我们遍历一个无向连通图时，显然一个点只会被访问一次，而访问一个点的方法是从一个当前已访问的点$u$，沿着它的邻边走向未访问过的点$v$，则对于任意非遍历起点，其都唯一对应一条边$(u,v)$，这些边恰巧构成一棵树（深究其证明，可考虑将$(u,v)$视为有向边，则非起点入度为$1$，起点入度为$0$），我们称之为&lt;strong&gt;无向连通图的搜索树&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;由于DFS序不唯一，所以搜索树也不唯一。若按节点编号顺序遍历图，则搜索树如下图中加粗部分：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A((A))
B((B))
C((C))
D((D))
E((E))
A === B
A --- C
B === C
B --- D
C === D
C === E
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;时间戳dfn&#34;&gt;时间戳dfn&lt;/h3&gt;
&lt;p&gt;按照DFS的先后顺序，我们可以为每个节点定义一个访问时间，其为该点在DFS序中的下标，我们称之为&lt;strong&gt;时间戳&lt;/strong&gt;。对于上图，DFS序为$ABCDE$，则若从$1$开始标记时间，则各点时间戳为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A((1))
B((2))
C((3))
D((4))
E((5))
A === B
A --- C
B === C
B --- D
C === D
C === E
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;追溯值low&#34;&gt;追溯值low&lt;/h3&gt;
&lt;p&gt;当DFS序不同时，我们对节点标记的$dfn$也不尽相同，例如上图稍加改变，即可得到：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A((1))
B((2))
C((4))
D((3))
E((5))
A === B
A --- C
B --- C
B === D
C === D
C === E
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以单纯考虑dfn似乎没什么意义。&lt;/p&gt;
&lt;p&gt;我们考虑这样一个事实：若一个点$u$存在非搜索树上的邻边$(u,v)$，且$dfn(u)&amp;gt;dfn(v)$，则显然遍历到点$v$（先于$u$）时，如果我们先走$(u,v)$，那么$dfn(u)$将减小为$dfn(v)+1$。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更准确地说，若一个点$u$存在不在搜索树上的邻边$(u,v)$，则必然有$dfn(u)&amp;gt;dfn(v)$，读者可以思考下为什么。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么，对任一点而言，我们将所有可优化的边枚举出来，则其中存在一个最小的优化值，但这个值是我们可以优化到的最小时间戳吗？并非如此，我们对上图稍作改动：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A((1))
B((3))
C((5))
D((4))
E((6))
F((2))
A === F
F === B
A --- E
B --- C
B === D
C === D
C === E
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以发现，当我们DFS到$6$时，我们有非搜索树上的邻边指向$1$，则$6$的$dfn$事实上可以被优化为$2$，当回溯到$5$时，我们发现$5$有非搜索树上的邻边指向$3$，则$5$的$dfn$可被优化为$4$。但由于我们是从$6$开始回溯的，既然$6$能被优化为$2$，那么$5$肯定能被优化到$3$。&lt;/p&gt;
&lt;p&gt;但这样还是无法避免因为DFS序不同产生的不唯一性问题，不过上述思考给我们指明了一个方向——我们不妨试着找到任意点能回溯到的最早的点的时间戳。与上面过程类似，对于任意点$u$，我们只需考虑这样的点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存在非搜索树上的边$(u,v)$的$v$点&lt;/li&gt;
&lt;li&gt;在回溯前能访问到的最早的点，即搜索树中以$u$为根的子树上的点能访问到的最早的点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;找出这些点中的最小的时间戳，即为我们能追溯到的最早节点，我们称之为&lt;strong&gt;追溯值&lt;/strong&gt;$low$。则依上述定义，我们可求得上图追溯值（A/B表示时间戳为A，追溯值为B）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A((1/1))
B((3/1))
C((5/1))
D((4/1))
E((6/1))
F((2/1))
A === F
F === B
A --- E
B --- C
B === D
C === D
C === E
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们发现上图各点都能追溯到$1$，若变换下例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TB
1((1/1))
2((2/1))
3((3/1))
4((4/1))
5((5/1))
6((6/6))
7((7/7))
8((8/6))
9((9/6))
1 === 2
2 === 3
3 === 4
4 === 5
2 --- 5
1 --- 5
1 -.- 6
6 -.- 7
6 === 8
6 --- 9
8 === 9
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;无向图的割边及判定&#34;&gt;无向图的割边及判定&lt;/h2&gt;
&lt;p&gt;对于无向连通图$G(V,E)$，若删去边$e\in E$后，$G$被分为两个不连通的子图，则称$e$为&lt;strong&gt;割边&lt;/strong&gt;或&lt;strong&gt;桥&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;根据上面$dfn$和$low$，很容易能想出割边的方法——无向边$(u,v)$是割边，当且仅当搜索树上存在$u$的一个子节点$v$，满足：&lt;/p&gt;
&lt;p&gt;$$dfn[u]&amp;lt;low[v]$$&lt;/p&gt;
&lt;p&gt;如果不明白上式，可以想象，$dfn[u]$指代了一条从起点到$u$的搜索树链，而$low[v]$代表了一条从$v$到$low[v]$对应的点的回溯链。那么若$dfn[u]&amp;lt;low[v]$，则这两条链相连状似一条穿起来的皮带（加粗部分），那么删掉皮带多出来的那一截中的任意一条边，都能使将原图分为两个不连通的子图（后面的点都无法追溯到$u$）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
s((s))
a((a))
b((b))
u((u))
v((v))
s --- u
u === v
v === a
a === b
b === v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若$dfn[u]=low[v]$，则状似闭环：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
s((s))
a((a))
u((u))
v((v))
s --- u
u === v
v === a
a === u
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若$dfn[u]&amp;gt;low[v]$，则状似未穿起的皮带：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
s((s))
a((a))
b((b))
u((u))
v((v))
s --- u
u === v
v === a
a === b
b === s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;是不是形象了很多？当然，这只是个辅助记忆的可爱的例子，因为如果从递归的最远的节点开始，存在无非搜索树上邻边的点，则上图两条链应当在某些部分重合。但在割边附近，都能形成状似上面三种情况的图形，单链除外：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
s((s))
u((u))
a((a))
b((b))
v((v))
t((t))
s --- u
u --- a
a --- b
b --- v
v --- t
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上图中显然任意一条边都为割边。&lt;/p&gt;
&lt;h2 id=&#34;对重边的处理&#34;&gt;对重边的处理&lt;/h2&gt;
&lt;p&gt;显然，当图中存在重边时，我们上面的$low$值求法存在问题，若仅考虑符合条件的两种点，即使存在重边，求得的$low$也不会变化，然而显然下图并不存在割边：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A((A))
B((B))
C((C))
D((D))
A --- B
A --- B
B --- C
C --- D
D --- B
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若不做一些处理，则会得到存在割边$(A,B)$的错误答案。&lt;/p&gt;
&lt;p&gt;一个可行的方法是——每个点的访问情况仅用于控制不重复遍历点，更新$low$值时转而考虑每条边是否访问过，如果存在未访问过的非搜索树上的边，更新其$low$即可。&lt;/p&gt;
&lt;p&gt;这里有必要对每条边做标记处理吗？显然不用。&lt;/p&gt;
&lt;p&gt;由于我们搜索时形成的是一棵树，那么我们在从节点$u$搜得邻点$v$时，纵使$(u,v)$可能不唯一，但真正访问的$(u,v)$有且仅有一条，当我们回溯时，仅需避开这条边的反向边（^1）即可。因此，我们可以在DFS函数中加一参数，用于记录走到当前节点来时的边的编号。&lt;/p&gt;
&lt;h2 id=&#34;参考实现&#34;&gt;参考实现&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//
// Created by Visors on 2020/10/27.
//
// 题目名：T103481 【模板】割边
// 题目来源：luogu
// 题目链接：https://www.luogu.com.cn/problem/T103481
// 算法：Tarjan
// 用途：无向图割边
// 时间复杂度：O(n+m)
//

#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

struct Tarjan {
    struct Edge {
        int to, next;

        Edge() = default;

        Edge(int to, int next) : to(to), next(next) {}
    };

    int vertexNum{}, edgeNum{};
    int cnt{};                // 当前时间戳
    vector&amp;lt;Edge&amp;gt; edges;
    vector&amp;lt;int&amp;gt; heads;
    vector&amp;lt;int&amp;gt; dfn;        // 时间戳
    vector&amp;lt;int&amp;gt; low;        // 最早追溯时间
    vector&amp;lt;int&amp;gt; bridges;     // 桥边编号集

    void init(int n, int m) {
        cnt = 0;
        vertexNum = n;
        edgeNum = m;
        heads.resize(vertexNum);
        fill(heads.begin(), heads.end(), -1);
        dfn.resize(vertexNum);
        low.resize(vertexNum);
        bridges.clear();
    }

    void addEdge(int u, int v) {
        edges.emplace_back(v, heads[u]);
        heads[u] = edges.size() - 1;
    }

    void dfs(int u, int inEdge) {
        dfn[u] = low[u] = ++cnt;
        for (int i = heads[u]; ~i; i = edges[i].next) {
            int &amp;amp;v = edges[i].to;
            if (!dfn[v]) {
                dfs(v, i);
                low[u] = min(low[u], low[v]);
                if (low[v] &amp;gt; dfn[u]) bridges.push_back(i);
            } else if (i != (inEdge ^ 1))
                low[u] = min(low[u], dfn[v]);
        }
    }

    void run() {
        for (int i = 0; i &amp;lt; vertexNum; i++)
            if (!dfn[i]) dfs(i, -1);
    }
} tarjan;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    int n, m;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    tarjan.init(n, m);
    for (int i = 1, u, v; i &amp;lt;= m; i++) {
        cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v;
        u--, v--;
        tarjan.addEdge(u, v);
        tarjan.addEdge(v, u);
    }
    tarjan.run();
    cout &amp;lt;&amp;lt; tarjan.bridges.size() &amp;lt;&amp;lt; endl;
//    for (int it:tarjan.bridges)
//        cout &amp;lt;&amp;lt; tarjan.edges[it ^ 1].to &amp;lt;&amp;lt; &#39; &#39; &amp;lt;&amp;lt; tarjan.edges[it].to &amp;lt;&amp;lt; endl;
    return 0;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;还是觉得Wowchemy的代码块样式好看！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
